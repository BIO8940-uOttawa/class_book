[["index.html", "BIO8940 Advanced stats and Open Science Work in Progress Note", " BIO8940 Advanced stats and Open Science Work in Progress Julien Martin 20-03-2021 Note Work in progress. New chapters are going to appears regularly meaning that if you download the pdf it might be incomplete by the time we do the practical in class. "],["préface.html", "Préface", " Préface Les exercices de laboratoire que vous retrouverez dans les pages qui suivent sont conçus de manière à vous permettre de développer une expérience pratique en analyse de données à l’aide d’un logiciel (R). R est un logiciel très puissant, mais comme tous les logiciels, il a des limites. En particulier il ne peut réfléchir à votre place, vous dire si l’analyse que vous tentez d’effectuer est appropriée ou sensée, ou interpréter biologiquement les résultats. "],["quelques-points-importants-à-retenir.html", "Quelques points importants à retenir", " Quelques points importants à retenir Avant de commencer une analyse statistique, il faut d’abord vous familiariser son fonctionnement. Cela ne veut pas dire que vous devez connaître les outils mathématiques qui la sous-tendent, mais vous devriez au moins comprendre les principes utilisés lors de cette analyse. Avant de faire un exercice de laboratoire, lisez donc la section correspondante dans les notes de cours. Sans cette lecture préalable, il est très probable que les résultats produits par le logiciel, même si l’analyse a été effectuée correctement, seront indéchiffrables. Les laboratoires sont conçus pour compléter les cours théoriques et vice versa. À cause des contraintes d’horaires, il se pourrait que le cours et le laboratoire ne soient pas parfaitement synchronisés. N’hésitez donc pas à poser des questions sur le labo en classe ou des questions théoriques au laboratoire. Travaillez sur les exercices de laboratoire à votre propre rythme. Certains exercices prennent beaucoup moins de temps que d’autres et il n’est pas nécessaire de compléter un exercice par séance de laboratoire. En fait deux séances de laboratoire sont prévues pour certains des exercices. Même si vous n’êtes pas notés sur les exercices de laboratoire, soyez conscient que ces exercices sont essentiels. Si vous ne les faites pas, il est très peu probable que vous serez capable de compléter les devoirs et le projet de session. Prenez donc ces exercices de laboratoire au sérieux ! Les 2 premier laboratoires sont conçu pour vous permettre d’acquérir ou de réviser le minimum de connaissances requises pour vous permettre de réaliser les exercices de laboratoires avec R. Il y a presque toujours de multiples façons de faire les choses avec R et vous ne trouverez ici que des méthodes simples. Ceux et celles d’entre vous qui y sont enclins pourront trouver en ligne des instructions plus détaillées et complexes. En particulier, je vous conseille : R pour les débutants http://cran.r-project.org/doc/contrib/Paradis-rdebuts_fr.pdf An introduction to R http://cran.r-project.org/doc/manuals/R-intro.html Si vous préférez des manuels, le site web de CRAN en garde une liste commentée à : http://www.r-project.org/doc/bib/R-books.html Une liste impressionnante de très bon livre sur R https://www.bigbookofr.com/ Finalement, comme aide-mémoire à garder sous la main, je vous recommande R reference card par Tom Short http://cran.r-project.org/doc/contrib/Short-refcard.pdf "],["quest-ce-que-r-et-pourquoi-lutiliser-dans-ce-cours.html", "Qu’est-ce que R et pourquoi l’utiliser dans ce cours?", " Qu’est-ce que R et pourquoi l’utiliser dans ce cours? R est un logiciel libre et multi-plateforme formant un système statistique et graphique. R est également un langage de programmation spécialisé pour les statistiques. R a deux très grands avantages pour ce cours, et un inconvénient embêtant initialement mais qui vous forcera à acquérir des excellentes habitudes de travail. Le premier avantage est que vous pouvez tous l’installer sur votre (ou vos) ordinateurs personnel gratuitement. C’est important parce que c’est à l’usage que vous apprendrez et maîtriserez réellement les biostatistiques et cela implique que vous devez avoir un accès facile et illimité à un logiciel statistique. Le deuxième avantage est que R peut tout faire en statistiques. R est conçu pour être extensible et est devenu l’outil de prédilection des statisticiens mondialement. La question n’est plus : \" Est-ce que R peut faire ceci? “, mais devient” Comment faire ceci avec R \". Et la recherche internet est votre ami. Aucun autre logiciel n’offre ces deux avantages. L’inconvénient embêtant initialement est que l’on doit opérer R en tapant des instructions (ou en copiant des sections de code) plutôt qu’en utilisant des menus et en cliquant sur différentes options. Si on ne sait pas quelle commande taper, rien ne se passe. Ce n’est donc pas facile d’utilisation à priori. Cependant, il est possible d’apprendre rapidement à faire certaines des opérations de base (ouvrir un fichier de données, faire un graphique pour examiner ces données, effectuer un test statistique simple). Et une fois que l’on comprend le principe de la chose, on peut assez facilement trouver sur le web des exemples d’analyses ou de graphiques plus complexes et adapter le code à nos propres besoins. C’est ce que vous ferez dans le premier laboratoire pour vous familiariser avec R. Pourquoi cet inconvénient est-il d’une certaine façon un avantage? Parce que vous allez sauver du temps en fin de compte. Garanti. Croyez-moi, on ne fait jamais une analyse une seule fois. En cours de route, on découvre des erreurs d’entrée de données, ou que l’on doit faire l’analyse séparément pour des sous-groupes, ou on obtient des données supplémentaires, ou on fait une erreur. On doit alors recommencer l’analyse. Avec une interface graphique et des menus, cela implique recommencer à cliquer ici, entre des paramètres dans des boîtes et sélectionner des boutons. Chaque fois avec possibilité d’erreur. Avec une série de commandes écrites, il suffit de corriger ce qui doit l’être puis de copier-coller l’ensemble pour répéter instantanément. Et vous avez la possibilité de parfaitement documenter ce que vous avez fait. C’est comme cela que les professionnels travaillent et offrent une assurance de qualité de leurs résultats. "],["installation-des-logiciels-nécessaires.html", "Installation des logiciels nécessaires", " Installation des logiciels nécessaires R Pour installer R sur un nouvel ordinateur, allez au site http://cran.r-project.org/. Vous y trouverez des versions compilées (binaries) ou non (sources) pour votre système d’exploitation de prédilection (Windows, MacOS, Linux). Note : R a déjà été installé sur les ordinateurs du laboratoire (la version pourrait être un peu plus ancienne, mais cela devrait être sans conséquences). 0.0.1 Text editor or IDE Tinn-r Atom sublime, emacs, vim Rstudio RStudio est un environnement de développement intégré (IDE) créé spécifiquement pour travailler avec R. Sa popularité connaît une progression foudroyante depuis 2014. Il permet de consulter dans une interface conviviale ses fichiers de script, la ligne de commande R, les rubriques d’aide, les graphiques, etc. RStudio est disponible à l’identique pour les plateformes Windows, OS X et Linux. Pour une utilisation locale sur son poste de travail, on installera la version libre (Open Source) de RStudio Desktop depuis le site https://www.rstudio.com/products/rstudio/download/ Visual Studio Code Tinn-r Paquets pour R Rmarkdown tinytex Ces 2 paquets devrait être installé automatiquement avec RStudio, mais pas toujours. Je vous recommande donc de les installer manuellement. Pour ce faire, simplement copier-coller le texte suivant dans le terminal R. install.packages(c(&quot;rmarkdown&quot;, &quot;tinytex&quot;)) pandoc laTex tinytex or others "],["instructions-générales-pour-les-laboratoires.html", "Instructions générales pour les laboratoires", " Instructions générales pour les laboratoires Apporter une clé USB ou son équivalent à chaque séance de laboratoire pour sauvegarder votre travail. Lire l’exercice de laboratoire AVANT la séance, lire le code R correspondant et préparer vos questions sur le code. Durant les pré-labs, écouter les instructions et posez vos questions au moment approprié. Faites les exercices du manuel de laboratoire à votre rythme, en équipe, puis je vous recommande de commencer (compléter?) le devoir. Profitez de la présence du démonstrateur et du prof… Pendant vos analyses, copiez-collez des fragments de sorties de R dans un document (par exemple dans votre traitement de texte favori) et annotez abondamment. Ne tapez pas directement vos commandes dans R mais plutôt dans un script. Vous pourrez ainsi refaire le labo instantanément, récupérer des fragments de code, ou plus facilement identifier les erreurs dans vos analyses. Créez votre propre librairie de fragments de codes (snippets). Annotez-là abondamment. Vous vous en féliciterez plus tard. "],["notes-sur-le-manuel.html", "Notes sur le manuel", " Notes sur le manuel Vous trouverez dans le manuel des explications sur la théorie, du code R, des explications sur R et des exercises. Le manuel essaie aussi de mettre en évidence le texte de différentes manières. Avec des sections à vous de jouer, ui indique un exercise à faire, idéalement sans regarder la solution qui se trouve plus bas. des avertissements des avertissements des points importants des notes et des conseils Resources Ce document est généré par l’excellente extension bookdown de Yihui Xie. Il est basé sur le précédent manuel de laboratoire BIO4558 manuel de laboratoire par Antoine Morin. L’introduction à R est largement reprise de l’excellent manuel de Julien Barnier intitulé Introduction à R et au tidyverse Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Licence Creative Commons "],["1-introduction-to-open-science.html", "1 Introduction to open Science", " 1 Introduction to open Science "],["2-introduction-to-rmarkdown.html", "2 Introduction to Rmarkdown ", " 2 Introduction to Rmarkdown "],["2-1-practical.html", "2.1 Practical", " 2.1 Practical We will create a new Rmarkdown document and edit it using basic R and Rmarkdown functions. 2.1.1 Context We will use the awesome palmerpenguins dataset 🐧 to explore and visualize data. These data have been collected and shared by Dr. Kristen Gorman and Palmer Station, Antarctica LTER. The package was built by Drs Allison Horst and Alison Hill, check out the official website. The package palmerpenguins has two datasets: penguins_raw has the raw data of penguins observations (see ?penguins_raw for more info) penguins is a simplified version of the raw data (see ?penguins for more info) For this exercise, we’re gonna use the penguins dataset. library(palmerpenguins) head(penguins) ## # A tibble: 6 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 ## 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 ## 3 Adelie Torgersen 40.3 18 195 3250 female 2007 ## 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 ## 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 ## 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 2.1.2 Questions 1) Install the package palmerpenguins. install.packages(&quot;palmerpenguins&quot;) 2) Create a new R Markdown document, name it and save it. Delete everything after line 12. Add a new section title, simple text and text in bold font. Compile (“Knit”). 3) Add a chunk in which you load the palmerpenguins. The corresponding line of code should be hidden in the output. Load also the tidyverse suite of packages. Modify the defaults to suppress all messages. ```{r, echo = FALSE, message = FALSE} library(palmerpenguins) library(tidyverse) ``` 4) Add another chunk in which you build a table with the 10 first rows of the dataset. ```{r} penguins %&gt;% slice(1:10) %&gt;% knitr::kable() ``` 5) In a new section, display how many individuals, penguins species and islands we have in the dataset. This info should appear directly in the text, you need to use inline code 😄. Calculate the mean of the (numeric) traits measured on the penguins. ## Numerical exploration There are `r nrow(penguins)` penguins in the dataset, and `r length(unique(penguins$species))` different species. The data were collected in `r length(unique(penguins$island))` islands of the Palmer archipelago in Antarctica. The mean of all traits that were measured on the penguins are: ```{r echo = FALSE} penguins %&gt;% group_by(species) %&gt;% summarize(across(where(is.numeric), mean, na.rm = TRUE)) ``` 6) In another section, entitled ‘Graphical exploration,’ build a figure with 3 superimposed histograms, each one corresponding to the body mass of a species. ## Graphical exploration A histogram of body mass per species: ```{r, fig.cap = &quot;Distribution of body mass by species of penguins&quot;} ggplot(data = penguins) + aes(x = body_mass_g) + geom_histogram(aes(fill = species), alpha = 0.5, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;purple&quot;,&quot;cyan4&quot;)) + theme_minimal() + labs(x = &quot;Body mass (g)&quot;, y = &quot;Frequency&quot;, title = &quot;Penguin body mass&quot;) ``` 7) In another section, entitled Linear regression, fit a model of bill length as a function of body size (flipper length), body mass and sex. Obtain the output and graphically evaluate the assumptions of the model. As reminder here is how you fit a linear regression. ```{r} model &lt;- lm(Y ~ X1 + X2, data = data) summary(model) plot(model) ``` ## Linear regression And here is a nice model with graphical output ```{r, fig.cap = &quot;Checking assumptions of the model&quot;} m1 &lt;- lm(bill_length_mm ~ flipper_length_mm + body_mass_g + sex, data = penguins) summary(m1) par(mfrow= c(2,2)) plot(m1) ``` 8) Add references manually or using citr in RStudio. Pick a recent publication from the researcher who shared the data, Dr Kristen Gorman. Import this publication in your favorite references manager (we use Zotero, no hard feeling), and create a bibtex reference that you will add to to the file mabiblio.bib. Add bibliography: mabiblio.bib at the beginning of your R Markdown document (YAML). Cite the reference iin the text using either typing the reference manually or using citr. To use citr, instal it first; if everything goes well, you should see it in the pulldown menu Addins 💪. Then simply use Insert citations in the pull-down menu Addins. Compile. 9) Change the default citation format (Chicago style) into the The American Naturalist format. It can be found here https://www.zotero.org/styles. To do soo, add csl: the-american-naturalist.csl in the YAML. 10) Build your report in html, pdf and docx format. 🎉 Example of output You can see an example of the Rmarkdown source file and pdf output Figure 2.1: Happy coding "],["3-introduction-to-github-with-r.html", "3 Introduction to github with R ", " 3 Introduction to github with R "],["3-1-practical-1.html", "3.1 Practical", " 3.1 Practical 3.1.1 Context We will configure Rstudio to work with our github account, then create a new project and start using github. To have some data I suggest to use the awesome palmerpenguins dataset 🐧. 3.1.2 Information of the data These data have been collected and shared by Dr. Kristen Gorman and Palmer Station, Antarctica LTER. The package was built by Drs Allison Horst and Alison Hill, check out the official website. The package palmerpenguins has two datasets. library(palmerpenguins) The dataset penguins is a simplified version of the raw data; see ?penguins for more info: head(penguins) ## # A tibble: 6 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex year ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 ## 2 Adelie Torgersen 39.5 17.4 186 3800 female 2007 ## 3 Adelie Torgersen 40.3 18 195 3250 female 2007 ## 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 ## 5 Adelie Torgersen 36.7 19.3 193 3450 female 2007 ## 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 The other dataset penguins_raw has the raw data; see ?penguins_raw for more info: head(penguins_raw) ## # A tibble: 6 x 17 ## studyName `Sample Number` Species Region Island Stage `Individual ID` `Clutch Complet… `Date Egg` `Culmen Length … `Culmen Depth (… `Flipper Length… `Body Mass (g)` Sex ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 PAL0708 1 Adelie Pe… Anvers Torger… Adult,… N1A1 Yes 2007-11-11 39.1 18.7 181 3750 MALE ## 2 PAL0708 2 Adelie Pe… Anvers Torger… Adult,… N1A2 Yes 2007-11-11 39.5 17.4 186 3800 FEMA… ## 3 PAL0708 3 Adelie Pe… Anvers Torger… Adult,… N2A1 Yes 2007-11-16 40.3 18 195 3250 FEMA… ## 4 PAL0708 4 Adelie Pe… Anvers Torger… Adult,… N2A2 Yes 2007-11-16 NA NA NA NA &lt;NA&gt; ## 5 PAL0708 5 Adelie Pe… Anvers Torger… Adult,… N3A1 Yes 2007-11-16 36.7 19.3 193 3450 FEMA… ## 6 PAL0708 6 Adelie Pe… Anvers Torger… Adult,… N3A2 Yes 2007-11-16 39.3 20.6 190 3650 MALE ## # … with 3 more variables: Delta 15 N (o/oo) &lt;dbl&gt;, Delta 13 C (o/oo) &lt;dbl&gt;, Comments &lt;chr&gt; For this exercise, we’re gonna use the penguins dataset. 3.1.3 Questions 1) Create a github acocunt if not done yet. 2) Configure Rstudio with your github account using the usethis package. 3) Store your GITHUB Personal Authorisation Token in your .Renviron file 4) Create a new R Markdown project, and create a new git repository 5) Create a new Rmarkdon document, in your project. Then save the file and stage it. 6) Create a new commit including the new file and push it to github (Check on github that it works). 7) Edit the file. Delete everything after line 12. Add a new section title, simple text and text in bold font. Then knit and compile. 8) Make a new commit (with a meaningful message), and push to github. 9) Create a new branch, and add a new section to the rmarkdown file in this branch. Whatever you want. I would suggest a graph of the data. 10) Creat a commit and push it to the branch. 11) On github, create a pull request to merge the 2 different branches. 12) Check and accep the pull request to merge the 2 branches. You have successfully used all the essential tools of git 🎉 . You are really to explore 🕵 and discover its power 💪 Figure 3.1: Happy git(hub)-ing "],["4-refresher-on-glm.html", "4 Refresher on glm", " 4 Refresher on glm m1 &lt;- glm(fish ~ french_captain, data = dads_joke, family = poisson) "],["5-introduction-to-linear-mixed-models.html", "5 Introduction to linear mixed models ", " 5 Introduction to linear mixed models "],["5-1-shrinkage.html", "5.1 Shrinkage", " 5.1 Shrinkage The following is an example of shrinkage, sometimes called partial-pooling, as it occurs in mixed effects models. It is often the case that we have data such that observations are clustered in some way (e.g. repeated observations for units over time, students within schools, etc.). In mixed models, we obtain cluster-specific effects in addition to those for standard coefficients of our regression model. The former are called random effects, while the latter are typically referred to as fixed effects or population-average effects. In other circumstances, we could ignore the clustering, and run a basic regression model. Unfortunately this assumes that all observations behave in the same way, i.e. that there are no cluster-specific effects, which would often be an untenable assumption. Another approach would be to run separate models for each cluster. However, aside from being problematic due to potentially small cluster sizes in common data settings, this ignores the fact that clusters are not isolated and potentially have some commonality. Mixed models provide an alternative where we have cluster specific effects, but ‘borrow strength’ from the population-average effects. In general, this borrowing is more apparent for what would otherwise be more extreme clusters, and those that have less data. The following will demonstrate how shrinkage arises in different data situations. 5.1.1 Analysis For the following we run a basic mixed model with a random intercept and random slopes for a single predictor variable. There are a number of ways to write such models, and the following does so for a single cluster \\(c\\) and observation \\(i\\). \\(y\\) is a function of the covariate \\(x\\), and otherwise we have a basic linear regression model. In this formulation, the random effects for a given cluster (\\(u_{* c}\\)) are added to each fixed effect (intercept \\(b_0\\) and the effect of \\(x\\), \\(b_1\\)). The random effects are multivariate normally distributed with some covariance. The per observation noise \\(\\sigma\\) is assumed constant across observations. \\[\\mu_{ic} = (b_0 + \\mathrm{u}_{0c})+ (b_1+\\mathrm{u}_{1c}) * x_{ic}\\] \\[\\mathrm{u}_{0}, \\mathrm{u}_{1} \\sim \\mathcal{N}(0, \\Sigma)\\] \\[y \\sim \\mathcal{N}(\\mu, \\sigma^2)\\] Such models are highly flexible and have many extensions, but this simple model is enough for our purposes. 5.1.2 Data Default settings for data creation are as follows: obs_per_cluster (observations per cluster) = 10 n_cluster (number of clusters) = 100 intercept (intercept) = 1 beta (coefficient for x) = .5 sigma (observation level standard deviation) = 1 sd_int (standard deviation for intercept random effect)= .5 sd_slope (standard deviation for x random effect)= .25 cor (correlation of random effect) = 0 balanced (fraction of overall sample size) = 1 seed (for reproducibility) = 1024 In this setting, \\(x\\) is a standardized variable with mean zero and standard deviation of 1. Unless a fraction is provided for balanced, the \\(N\\), i.e. the total sample size, is equal to n_cluster * obs_per_cluster. The following is the function that will be used to create the data, which tries to follow the model depiction above. It requires the tidyverse package to work. 5.1.3 Run the baseline model We will use lme4 to run the analysis. We can see that the model recovers the parameters fairly well, even with the default of only 1000 observations. df &lt;- create_data() library(lme4) mod &lt;- lmer(y ~ x + (x|cluster), df) summary(mod, cor=F) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: y ~ x + (x | cluster) ## Data: df ## ## REML criterion at convergence: 3012.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.9392 -0.6352 -0.0061 0.6156 2.8721 ## ## Random effects: ## Groups Name Variance Std.Dev. Corr ## cluster (Intercept) 0.29138 0.5398 ## x 0.05986 0.2447 0.30 ## Residual 0.99244 0.9962 ## Number of obs: 1000, groups: cluster, 100 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.93647 0.06282 98.38512 14.91 &lt;2e-16 *** ## x 0.54405 0.04270 91.69469 12.74 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 5.1.4 Visualize the baseline model Now it is time to visualize the results. We will use gganimate to bring the shrinkage into focus. We start with the estimates that would be obtained by a ‘regression-by-cluster’ approach or a linear regression for each cluster. The movement shown will be of those cluster-specific estimates toward the mixed model estimates. On the x axis is the estimate for the intercepts, on the y axis are the estimated slopes of the x covariate. We see more clearly what the mixed model does. The general result is that cluster-specific effects (lighter color) are shrunk back toward the population-average effects (the ‘black hole’), as the imposed normal distribution for the random effects makes the extreme values less probable. Likewise, those more extreme cluster-specific effects, some of which are not displayed as they are so far from the population average, will generally have the most shrinkage imposed. In terms of prediction, it is akin to introducing bias for the cluster specific effects while lowering variance for prediction of new data, and allows us to make predictions on new categories we have not previously seen - we just assume an ‘average’ cluster effect, i.e. a random effect of 0. 5.1.5 Summary Mixed models incorporate some amount of shrinkage for cluster-specific effects. Data nuances will determine the relative amount of ‘strength borrowed,’ but in general, such models provide a good way for the data to speak for itself when it should, and reflect an ‘average’ when there is little information. An additional benefit is that thinking about models in this way can be seen as a precursor to Bayesian approaches, which can allow for even more flexibility via priors, and more control over how shrinkage is added to the model. "],["5-2-practical-2.html", "5.2 Practical", " 5.2 Practical 5.2.1 Overview This practical is intended to get you started fitting some simple mixed models with so called random intercepts. The tutorial is derived from one that accompanied the paper (Houslay and Wilson 2017), “Avoiding the misuse of BLUP in behavioral ecology.” Here, you will be working through a simplified version in which I have taken more time to cover the basic mixed models and don’t cover multivariate models which were really the main point of that paper. So if you find this material interesting don’t worry we will go through a more advanced version of the original paper on multivariate models in chapter XX. The original version will be worth a work through to help you break into multivariate mixed models anyway! Here we will: Learn how to fit - and interpret the results of - a simple univariate mixed effect model See how to add fixed and random effects to your model, and to test their significance in the normal frequentists sense We are going to use the 📦 lme4 (Bates et al. 2020) which is widely used and great for simple mixed models. However, since, for philosophical reasons, lme4 does not provide any p-values for either fixed or random effects, we are going to use the 📦 lmerTest (Kuznetsova et al. 2020), which add a bunch a nice goodies to lme4 For slightly more complex models, including multivariate ones, generalised models, and random effects of things like shared space, pedigree, phylogeny I tend to use different 📦 like MCMCglmm (Hadfield 2010) (which is Bayesian, look at Jarrod Hadfield’s excellent course notes (Hadfield 2021)) or ASReml-R (Butler 2020) (which is likelihood based/frequentist but sadly is not free). 5.2.2 R packages needed First we load required libraries library(lmerTest) library(tidyverse) library(rptR) 5.2.3 The superb wild unicorns of the Scottish Highlands Unicorns, a legendary animal and also symbol or Scotland, are frequently described as extremely wild woodland creature but also a symbol of purity and grace. Here is one of most accurate representation of the lengendary animal. Figure 5.1: The superb unicorn of the Scottish Highlands Despite their image of purity and grace, unicorns (Unicornus legendaricus) are raging fighter when it comes to compete for the best sweets you can find at the bottom of rainbows (unicorn favourite source of food). We want to know: If aggressiveness differs among individuals If aggressive behaviour is plastic (change with the environment) If aggressive behaviour depends on body condition of focal animal With respect to plasticity, we will focus on rival size as an ‘environment.’ Common sense, and animal-contest theory, suggest a small animal would be wise not to escalate an aggressive contest against a larger, stronger rival. However, there are reports in the legendary beasty literature that they get more aggressive as rival size increases. Those reports are based on small sample sizes and uncontrolled field observations by foreigners Munro baggers enjoying their whisky after a long day in the hills. 5.2.3.1 Experimental design Here, we have measured aggression in a population of wild unicorns. We brought some (n=80) individual into the lab, tagged them so they were individually identifiable, then repeatedly observed their aggression when presented with model ‘intruders’ (animal care committe approved). There were three models; one of average unicorn (calculated as the population mean body length), one that was build to be 1 standard deviation below the population mean, and one that was 1 standard deviation above. Data were collected on all individuals in two block of lab work. Within each block, each animal was tested 3 times, once against an ‘intruder’ of each size. The test order in which each animal experienced the three instruder sizes was randomised in each block. The body size of all focal individuals was measured at the beginning of each block so we know that too (and have two separate measures per individual). 5.2.3.2 looking at the data Let’s load the data file unicorns_aggression.csv in a R object named unicorns and make sure we understand what it contains unicorns &lt;- read.csv(&quot;data/unicorns_aggression.csv&quot;) You can use summary(unicorns) to get an overview of the data and/or str(unicorns) to see the structure in the first few lines. This data frame has 6 variables: str(unicorns) ## &#39;data.frame&#39;: 480 obs. of 6 variables: ## $ ID : chr &quot;ID_1&quot; &quot;ID_1&quot; &quot;ID_1&quot; &quot;ID_1&quot; ... ## $ block : num -0.5 -0.5 -0.5 0.5 0.5 0.5 -0.5 -0.5 -0.5 0.5 ... ## $ assay_rep : int 1 2 3 1 2 3 1 2 3 1 ... ## $ opp_size : int -1 1 0 0 1 -1 1 -1 0 1 ... ## $ aggression: num 7.02 10.67 10.22 8.95 10.51 ... ## $ body_size : num 206 206 206 207 207 ... summary(unicorns) ## ID block assay_rep opp_size aggression body_size ## Length:480 Min. :-0.5 Min. :1 Min. :-1 Min. : 5.900 Min. :192.0 ## Class :character 1st Qu.:-0.5 1st Qu.:1 1st Qu.:-1 1st Qu.: 8.158 1st Qu.:229.7 ## Mode :character Median : 0.0 Median :2 Median : 0 Median : 8.950 Median :250.0 ## Mean : 0.0 Mean :2 Mean : 0 Mean : 9.002 Mean :252.5 ## 3rd Qu.: 0.5 3rd Qu.:3 3rd Qu.: 1 3rd Qu.: 9.822 3rd Qu.:272.0 ## Max. : 0.5 Max. :3 Max. : 1 Max. :12.170 Max. :345.2 So the different columns in the data set are: Individual ID Experimental Block, denoted for now as a continuous variable with possible values of -0.5 (first block) or +0.5 (second block) Individual body_size, as measured at the start of each block in kg The repeat number for each behavioural test, assay_rep Opponent size (opp_size), in standard deviations from the mean (i.e., -1,0,1) aggression, our behavioural trait, measured 6 times in total per individual (2 blocks of 3 tests) maybe add something on how to look at data structure closely using tables 5.2.4 Do unicorns differ in aggressiveness? Your first mixed model Fit a first mixed model with lmer that have only individual identity as a random effect and only a population mean. Why, so simple? Because we simply want to partition variance around the mean into a component that among-individual variance and one that is within-individual variance. A sensible researcher would probably take the time to do some exploratory data plots here. So let’s write a mixed model. This one is going to have no fixed effects except the mean, and just one random effect - individual identity. m_1 &lt;- lmer(aggression ~ 1 + (1 | ID), data = unicorns) ## boundary (singular) fit: see ?isSingular There is a warning… something about “singularities.” Ignore that for a moment. Now you need to get the model output. By that I just mean use summary(model_name). summary(m_1) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: aggression ~ 1 + (1 | ID) ## Data: unicorns ## ## REML criterion at convergence: 1503.7 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.68530 -0.73094 -0.04486 0.71048 2.74276 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 0.000 0.000 ## Residual 1.334 1.155 ## Number of obs: 480, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.00181 0.05272 479.00000 170.7 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## optimizer (nloptwrap) convergence code: 0 (OK) ## boundary (singular) fit: see ?isSingular In the summary you will find a table of fixed effects. Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 9.00181 0.05272 479.00000 170.7 &lt;2e-16 *** The intercept (here the mean) is about 9 and is significantly &gt;0 - fine, but not very interesting to us. You will also find a random effect table that contains estimates of the among individual (ID) and residual variances. Random effects: Groups Name Variance Std.Dev. ID (Intercept) 0.000 0.000 Residual 1.334 1.155 Number of obs: 480, groups: ID, 80 The among individual (ID) is estimated as zero. In fact this is what the cryptic warning was about: in most situations the idea of a random effect explaining less than zero variance is not sensible (strangely there are exception!). So by default the variance estimates are constrained to lie in positive parameter space. Here in trying to find the maximum likelihood solution for among-individual variance, our model has run up against this constraint. 5.2.4.1 Testing for random effects We can test the statistical significance of the random effect using the ranova() command in lmerTest. This function is actually doing a likelihood ratio test (LRT) of the random effect. The premise of which is that twice the difference in log-likelihood of the full and reduced (i.e. with the random effect dropped) is itself distributed as \\(\\chi^2\\)$ with DF equal to the number of parameters dropped (here 1). Actually, there is a good argument that this is too conservative, but we can discuss that later. So let’s do the LRT for the random effect using ranova() ranova(m_1) ## ANOVA-like table for random-effects: Single term deletions ## ## Model: ## aggression ~ (1 | ID) ## npar logLik AIC LRT Df Pr(&gt;Chisq) ## &lt;none&gt; 3 -751.83 1509.7 ## (1 | ID) 2 -751.83 1507.7 0 1 1 There is apparently no among-individual variance in aggressiveness. So this is a fairly rubbish and underwhelming model. Let’s improve it. 5.2.5 Do unicorns differ in aggressiveness? A better mixed model The answer we got from our first model is not wrong, it estimated the parameters we asked for and that might be informative or not and that might be representative or not of the true biology. Anyway all models are wrong but as models go this one is fairly rubbish. In fact we have explained no variation at all as we have no fixed effects (except the mean) and our random effect variance is zero. We woud have seen just how pointless this model was if we’d plotted it plot(m_1) (#fig:mod1_plot)Fitted values vs residuals for a simple mixed model of unicorn aggression So we can probably do better at modelling the data, which may or may not change our view on whether there is any real variation among unicorns in aggressiveness. For instance, we can (and should have started with) an initial plot of the phenotypic data against opponent size indicates to have a look at our prediction. The code below uses the excellent 📦 ggplot2 but the same figure can be done using base R code. ggplot(unicorns, aes(x = opp_size, y = aggression)) + geom_jitter( alpha = 0.5, width = 0.05 ) + scale_x_continuous(breaks = c(-1, 0, 1)) + labs( x = &quot;Opponent size (SD)&quot;, y = &quot;Aggression&quot; ) + theme_classic() ggplot(unicorns, aes(x = opp_size, y = aggression)) + geom_jitter( alpha = 0.5, width = 0.05 ) + scale_x_continuous(breaks = c(-1, 0, 1)) + labs( x = &quot;Opponent size (SD)&quot;, y = &quot;Aggression&quot; ) + theme_classic() Figure 5.2: Unicorn aggressivity as a function of opponent size when fighting for sweets As predicted, there is a general increase in aggression with opponent size (points are lightly jittered on the x-axis to show the spread of data a little better) You can see the same thing from a quick look at the population means for aggression at opponent size. Here we do it with the kable function that makes nice tables in rmarkdown documents. unicorns %&gt;% group_by(opp_size) %&gt;% summarise(mean_aggr = mean(aggression)) %&gt;% knitr::kable(digits = 2) opp_size mean_aggr -1 8.00 0 8.91 1 10.09 So, there does appear to be plasticity of aggression with changing size of the model opponent. But other things may explain variation in aggressiveness too - what about block for instance? Block effects may not be the subject of any biologically interesting hypotheses, but accounting for any differences between blocks could remove noise. There may also be systematic change in behaviour as an individual experiences more repeat observations (i.e. exposure to the model). Do they get sensitised or habituated to the model intruder for example? So let’s run a mixed model with the same random effect of individual, but with a fixed effects of opponent size (our predictor of interest) and experimental block. m_2 &lt;- lmer(aggression ~ opp_size + block + (1 | ID), data = unicorns) 5.2.5.1 Diagnostic plots Run a few diagnostic plots before we look at the answers. In diagnostic plots, we want to check the condition of applications of the linear mixed model which are the same 4 as the linear model plus 2 extra: Linearity of the relation between covariates and the response No error on measurement of covariates Residual have a Gaussian distribution Homoscedasticty (variance of residuals is constant across covariates) Random effects have a Gaussian distribution Residual variance is constant across all levels of a random effect This is checked with: done with data exploration graph (i.e. just plot the data see if it is linear) see previous graph assumed to be correct if measurement error is lower than 10% of variance in the variable I know this sounds pretty bad using quantile-quantile plot or histogram of residuals par(mfrow = c(1, 2)) # multiple graphs in a window qqnorm(residuals(m_2)) # a q-q plot qqline(residuals(m_2)) hist(resid(m_2)) # are the residuals roughly Gaussian? Figure 5.3: Checking residuals have Gaussian distribution using plot of residuals by fitted values plot(m_2) Figure 5.4: Residuals by fitted values for model m_2 to check homoscedasticity histogram of the predictions for the random effects (BLUPs) # extracting blups r1 &lt;- as.data.frame(ranef(m_2, condVar = TRUE)) par(mfrow = c(1, 2)) hist(r1$condval) qqnorm(r1$condval) qqline(r1$condval) Figure 5.5: Checking random effects are gaussian plotting the sorted BLUPs with their errors r1 &lt;- r1[order(r1$condval), ] # sorting the BLUPs ggplot(r1, aes(y = grp, x = condval)) + geom_point() + geom_pointrange( aes(xmin = condval - condsd * 1.96, xmax = condval + condsd * 1.96) ) + geom_vline(aes(xintercept = 0, color = &quot;red&quot;)) + theme_classic() + theme(legend.position = &quot;none&quot;) 5.2.5.2 Inferences Now summarise this model. We will pause here for you to think about and discuss a few things: * What can you take from the fixed effect table? * How do you interpret the intercept now that there are other effects in the model? * What would happen if we scaled our fixed covariates differently? Why? summary(m_2) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: aggression ~ opp_size + block + (1 | ID) ## Data: unicorns ## ## REML criterion at convergence: 1129.9 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.79296 -0.64761 0.00155 0.67586 2.71456 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 0.02478 0.1574 ## Residual 0.58166 0.7627 ## Number of obs: 480, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.00181 0.03901 79.00000 230.778 &lt;2e-16 *** ## opp_size 1.04562 0.04263 398.00000 24.525 &lt;2e-16 *** ## block -0.02179 0.06962 398.00000 -0.313 0.754 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) opp_sz ## opp_size 0.000 ## block 0.000 0.000 Try tweaking the fixed part of your model: What happens if you add more fixed effects? Try it! Could focal body size also matter? If so, should you rescale before adding it to the model? Should you add interactions (e.g. block:opp_size)? Should you drop non-significant fixed effects? Having changed the fixed part of your model, do the variance estimates change at all? Is among-individual variance always estimated as zero regardless of fixed effects? Is among-individual variance significant with some fixed effets structures but not others? 5.2.6 What is the repeatability? As a reminder, repeatability is the proportion of variance explained by a random effect and it is estimate as the ratio of the variance associated to a random effect by the total variance, or the sum of the residual variance and the different variance compoentn associated with the random effects. In our first model among-individual variance was zero, so R was zero. If we have a different model of aggression and get a non-zero value of the random effect variance, we can obviously calculate a repeatability estimate (R). So we are all working from the same starting point, let’s all stick with a common set of fixed effects from here on: m_3 &lt;- lmer( aggression ~ opp_size + scale(body_size, center = TRUE, scale = TRUE) + scale(assay_rep, scale = FALSE) + block + (1 | ID), data = unicorns) summary(m_3) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: aggression ~ opp_size + scale(body_size, center = TRUE, scale = TRUE) + scale(assay_rep, scale = FALSE) + block + (1 | ID) ## Data: unicorns ## ## REML criterion at convergence: 1136.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.85473 -0.62831 0.02545 0.68998 2.74064 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 0.02538 0.1593 ## Residual 0.58048 0.7619 ## Number of obs: 480, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.00181 0.03907 78.07315 230.395 &lt;2e-16 *** ## opp_size 1.05141 0.04281 396.99857 24.562 &lt;2e-16 *** ## scale(body_size, center = TRUE, scale = TRUE) 0.03310 0.03896 84.21144 0.850 0.398 ## scale(assay_rep, scale = FALSE) -0.05783 0.04281 396.99857 -1.351 0.177 ## block -0.02166 0.06955 397.00209 -0.311 0.756 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) opp_sz sc=Ts=T s(_s=F ## opp_size 0.000 ## s(_,c=TRs=T 0.000 0.000 ## s(_,s=FALSE 0.000 -0.100 0.000 ## block 0.000 0.000 0.002 0.000 So we’d probably calculate R using the individual and residual variance simply as: 0.02538 / (0.02538 + 0.58048) ## [1] 0.04189087 Do you see where I took the numbers ? We can use some more fancy coding to extract the estimates and plugged them in a formula to estimate the repeatbility v_id &lt;- VarCorr(m_3)$ID[1, 1] v_r &lt;- attr(VarCorr(m_3), &quot;sc&quot;)^2 r_man &lt;- v_id / (v_id + v_r) r_man ## [1] 0.04188879 Which yields an estimate of approximately R=4%. Strictly speaking we should make clear this a conditional repeatability estimate. Conditional on what you might ask… on the fixed effects in your model. So our best estimate of 4% refers to the proportion of variance in aggressiveness not explained by fixed effects that is explained by individual identity. This isn’t much and still won’t be significant, but illustrates the point that conditional repeatabilities often have a tendency to go up as people explain more of the residual variance by adding fixed effects. This is fine and proper, but can mislead the unwary reader. It also means that decisions about which fixed effects to include in your model need to be based on how you want to interpret R not just on, for instance, whether fixed effects are deemed significant. 5.2.7 A quick note on uncertainty Using lmer in the 📦 lme4 📦 there isn’t a really simple way to put some measure of uncertainty (SE or CI) on derived parameters like repeatabilities. This is a bit annoying. Such things are more easily done with other mixed model 📦 like MCMCglmm and asreml which are a bit more specialist. If you are using lmer for models you want to publish then you could look into the 📦 rptR (Stoffel et al. 2019). This acts as a ‘wrapper’ for lmer models and adds some nice functionality including options to boostrap confidence intervals. Regardless, of how you do it, if you want to put a repeatability in one of your papers as a key result - it really should be accompanied by a measure of uncertainty just like any other effect size estimate. Here I am estimating the repeatability and using bootstrap to estimate a confidence interval and a probability associated with the repeatability with the rptR 📦. For more information about the use of the package and the theory behind it suggest the excellent paper associated with the package (Stoffel et al. 2017) r_rpt &lt;- rptGaussian( aggression ~ opp_size + block + (1 | ID), grname = &quot;ID&quot;, data = unicorns) ## Bootstrap Progress: r_rpt ## ## ## Repeatability estimation using the lmm method ## ## Repeatability for ID ## R = 0.041 ## SE = 0.031 ## CI = [0, 0.108] ## P = 0.0966 [LRT] ## NA [Permutation] 5.2.8 An easy way to mess up your mixed models We will try some more advanced mixed models in a moment to explore plasticity in aggressiveness a bit more. First let’s quickly look for among-individual variance in focal body size. Why not? We have the data handy, everyone says morphological traits are very repeatable and - lets be honest - who wouldn’t like to see a small P value after striking out with aggressiveness. Include a random effect of ID as before and maybe a fixed effect of block, just to see if the beasties were growing a bit between data collection periods. lmer_size &lt;- lmer(body_size ~ block + (1 | ID), data = unicorns) Summarise and test the random effect. summary(lmer_size) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: body_size ~ block + (1 | ID) ## Data: unicorns ## ## REML criterion at convergence: 3460.7 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.80452 -0.71319 0.00718 0.70280 1.81747 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 936.01 30.594 ## Residual 34.32 5.858 ## Number of obs: 480, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 252.5031 3.4310 79.0000 73.595 &lt;2e-16 *** ## block -0.1188 0.5348 399.0000 -0.222 0.824 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## block 0.000 ranova(lmer_size) ## ANOVA-like table for random-effects: Single term deletions ## ## Model: ## body_size ~ block + (1 | ID) ## npar logLik AIC LRT Df Pr(&gt;Chisq) ## &lt;none&gt; 4 -1730.4 3468.7 ## (1 | ID) 3 -2325.6 4657.1 1190.4 1 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 What might you conclude, and why would this be foolish? Hopefully you spotted the problem here. You have fed in a data set with 6 records per individual (with 2 sets of 3 identical values per unicorns), when you know size was only measured twice in reality. This means you’d expect to get a (potentially very) upwardly biased estimate of R and a (potentially very) downwardly biased P value when testing among-individual variance. How can we do it properly? We can prune the data to the two actual observations per unicorns by just selecting the first assay in each block. unicorns2 &lt;- unicorns[unicorns$assay_rep == 1, ] lmer_size2 &lt;- lmer(body_size ~ block + (1 | ID), data = unicorns2) summary(lmer_size2) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: body_size ~ block + (1 | ID) ## Data: unicorns2 ## ## REML criterion at convergence: 1373.4 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.54633 -0.56198 0.01319 0.56094 1.42095 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 912.84 30.213 ## Residual 57.78 7.601 ## Number of obs: 160, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 252.5031 3.4310 79.0000 73.595 &lt;2e-16 *** ## block -0.1188 1.2019 79.0000 -0.099 0.922 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## block 0.000 ranova(lmer_size2) ## ANOVA-like table for random-effects: Single term deletions ## ## Model: ## body_size ~ block + (1 | ID) ## npar logLik AIC LRT Df Pr(&gt;Chisq) ## &lt;none&gt; 4 -686.68 1381.3 ## (1 | ID) 3 -771.93 1549.9 170.51 1 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Summarise and test your random effect and you’ll see the qualitative conclusions will actually be very similar using the pruned data set. Of course this won’t generallty but be true, so just be careful. Mixed models are intended to help you model repeated measures data with non-independence, but they won’t get you out of trouble if you mis-represent the true structure of observations on your dependent variable. "],["5-3-happy-mixed-modelling.html", "5.3 Happy mixed-modelling", " 5.3 Happy mixed-modelling Figure 5.6: The superb unicorn "],["6-introduction-to-glmm.html", "6 Introduction to GLMM ", " 6 Introduction to GLMM "],["6-1-practical-3.html", "6.1 Practical", " 6.1 Practical Spatial variation in nutrient availability and herbivory is likely to cause pop-ulation differentiation and maintain genetic diversity in plant populations.Here we measure the extent to which mouse-ear cress (Arabidopsis thaliana)exhibits population and genotypic variation in their responses to these im-portant environmental factors. We are particularly interested in whetherthese populations exhibit nutrient mediated compensation, where higher nutrient levels allow genotypes to better tolerate herbivory (Banta et al.,2010). We use GLMMs to estimate the effect of nutrient levels, simulated hebivory, and their interaction on fruit production in Arabidopsis thaliana(fixed effects), and the extent to which populations vary in their responses(random effects, or variance components) 6.1.1 Packages and functions You need to download the “extra_funs.R” script for some functions used in the Practical library(lme4) library(tidyverse) library(patchwork) library(lattice) source(&quot;data/extra_funs.R&quot;) 6.1.2 The data set In this data set, the response variable is the number of fruits (i.e. seedcapsules) per plant. The number of fruits produced by an individual plant(the experimental unit) was hypothesized to be a function of fixed effects,including nutrient levels (low vs. high), simulated herbivory (none vs. apicalmeristem damage), region (Sweden, Netherlands, Spain), and interactionsamong these. Fruit number was also a function of random effects including both the population and individual genotype. Because Arabidopsis is highlyselfing, seeds of a single individual served as replicates of that individual.There were also nuisance variables, including the placement of the plantin the greenhouse, and the method used to germinate seeds. These were estimated as fixed effects but interactions were excluded. X observation number (we will use this observation number later, when we are accounting for overdispersion) reg a factor for region (Netherlands, Spain, Sweden). popu a factor with a level for each population. gen a factor with a level for each genotype. rack a nuisance factor for one of two greenhouse racks. nutrient a factor with levels for minimal or additional nutrients. amd a factor with levels for no damage or simulated herbivory (apical meristem damage; we will sometimes refer to this as “clipping”) status a nuisance factor for germination method. total.fruits the response; an integer count of the number of fruits perplant. 6.1.3 Specifying fixed and random Effects Here we need to select a realistic full model, based on the scientific ques-tions and the data actually at hand. We first load the data set and makesure that each variable is appropriately designated as numeric or factor (i.e.categorical variable). dat_tf &lt;- read.csv(&quot;data/Banta_TotalFruits.csv&quot;) str(dat_tf) ## &#39;data.frame&#39;: 625 obs. of 9 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ reg : chr &quot;NL&quot; &quot;NL&quot; &quot;NL&quot; &quot;NL&quot; ... ## $ popu : chr &quot;3.NL&quot; &quot;3.NL&quot; &quot;3.NL&quot; &quot;3.NL&quot; ... ## $ gen : int 4 4 4 4 4 4 4 4 4 5 ... ## $ rack : int 2 1 1 2 2 2 2 1 2 1 ... ## $ nutrient : int 1 1 1 1 8 1 1 1 8 1 ... ## $ amd : chr &quot;clipped&quot; &quot;clipped&quot; &quot;clipped&quot; &quot;clipped&quot; ... ## $ status : chr &quot;Transplant&quot; &quot;Petri.Plate&quot; &quot;Normal&quot; &quot;Normal&quot; ... ## $ total.fruits: int 0 0 0 0 0 0 0 3 2 0 ... The X, gen, rack and nutrient variables are coded as integers, but we want them to be factors.  We use transform(), which operates within the data set, to avoid typing lots of commands like dat_tf$rack &lt;- factor(dat_tf$rack)  At the same time, we reorder the clipping variable so that \"unclipped\" is the reference level (we could also have used relevel(amd,\"unclipped\")). dat_tf &lt;- mutate( dat_tf, X = factor(X), gen = factor(gen), rack = factor(rack), amd = factor(amd, levels = c(&quot;unclipped&quot;, &quot;clipped&quot;)), nutrient = factor(nutrient, label = c(&quot;Low&quot;, &quot;High&quot;)) ) Now we check replication for each genotype (columns) within each population (rows). (reptab &lt;- with(dat_tf, table(popu, gen))) ## gen ## popu 4 5 6 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 30 34 35 36 ## 1.SP 0 0 0 0 0 39 26 35 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 1.SW 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 20 0 0 0 0 0 ## 2.SW 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 14 0 0 0 ## 3.NL 31 11 13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 5.NL 0 0 0 35 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 5.SP 0 0 0 0 0 0 0 0 43 22 12 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 6.SP 0 0 0 0 0 0 0 0 0 0 0 13 24 14 0 0 0 0 0 0 0 0 0 0 ## 7.SW 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45 47 45 ## 8.SP 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13 16 35 0 0 0 0 0 0 0 Exercise: this mode of inspection is OK for this data set but might fail for much larger data sets or for more levels of nesting. See if you can think of some other numerical or graphical methods for inspecting the structure of data sets. plot(reptab) gives a mosaic plot of the two-way table; examine this, see if you can figure out how to interpret it, and decide whether you think it might be useful try the commands colSums(reptab&gt;0) (and the equivalent for rowSums) and figure out what they are telling you. Using this recipe, how would you compute the range of number of genotypes per treatment combination? Do you find the mosaic plot you obtained ugly and super hard to read? Me too 🤣 plot(reptab) Figure 6.1: A truly useless plot no one can understand colSums() do the sum of all the rows for each columns of a table. So colSums(reptab&gt;0) gives you for each genotype the number of populations (lines) where you have at least 1 observations. colSums(reptab &gt; 0) ## 4 5 6 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 30 34 35 36 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 rowSums(reptab &gt; 0) ## 1.SP 1.SW 2.SW 3.NL 5.NL 5.SP 6.SP 7.SW 8.SP ## 3 2 2 3 2 3 3 3 3 You firts need to create a new table of number of observations per treatment and genotypes reptab2 &lt;- with(dat_tf, table(paste(amd, nutrient, sep = &quot;_&quot;), gen)) range(reptab2) ## [1] 2 13 This reveals that we have only 2–4 populations per region and 2–3 genotypes per population. However, we also have 2–13 replicates per genotype for each treatment combination (four unique treatment combinations: 2 levels of nutrients by 2 levels of simulated herbivory). Thus, even though this was a reasonably large experiment (625 plants), there were a very small number of replicates with which to estimate variance components, and many more potential interactions than our data can support. Therefore, judicious selection of model terms, based on both biology and the data, is warranted. We note that we don’t really have enough levels per random effect, nor enough replication per unique treatment combination. Therefore, we decide to omit the fixed effect of “region,” although we recognize that populations in different regions are widely geographically separated. However, as in all GLMMs where the scale parameter is treated as fixed and deviations from the fixed scale parameter would be identifiable (i.e. Poisson and binomial (N &gt; 1), but not binary, models) we may have to deal with overdispersion. 6.1.4 Look at overall patterns in data I usually like to start with a relatively simple overall plot of the data, disregarding the random factors, just to see what’s going on. For reasons to be discussed below, we choose to look at the data on the log (or log(1 + x) scale. Let’s plot either box-and-whisker plots (useful summaries) or dot plots (more detailed, good for seeing if we missed anything). Figure 6.2: Number of fruits (log + 1) as a function of treatments Exercise generate these plots and figure out how they work before continuing. Try conditioning/faceting on population rather than region: for facet_wrap you might want to take out the nrow=1 specification. If you want try reorder the subplots by overall mean fruit set and/or colour the points according to the region they come from. p1 &lt;- qplot( interaction(nutrient, amd), log(1 + total.fruits), data = dat_tf, geom = &quot;boxplot&quot;) + facet_wrap(~reg, nrow = 1) + theme(axis.text.x = element_text(angle = 45)) + ggtitle(&quot;Boxplot&quot;) p2 &lt;- qplot( interaction(nutrient, amd), log(1 + total.fruits), data = dat_tf) + facet_wrap(~reg, nrow = 1) + stat_sum() + theme(axis.text.x = element_text(angle = 45)) + ggtitle(&quot;Dot plot&quot;) p1 + p2 6.1.5 Choose an error distribution The data are non-normal in principle (i.e., count data, so our first guess would be a Poisson distribution). If we transform total fruits with the canonical link function (log), we hope to see relatively homogeneous variances across categories and groups. First we define a new factor that represents every combination of genotype and treatment (nutrient × clipping) treatment, and sort it in order of increasing mean fruit set. dat_tf &lt;- dat_tf %&gt;% mutate( gna = reorder(interaction(gen, nutrient, amd), total.fruits, mean) ) Now time to plot it ggplot(dat_tf, aes(x = gna, y = log(1 + total.fruits))) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_text(angle = 90)) Figure 6.3: Boxplot of total fruits (log + 1) per genotypes and treatments We could also calculate the variance for each genotype × treatment combination and provide a statistical summary of these variances. This reveals substantial variation among the sample variances on the transformed data. In addition to heterogeneous variances across groups, Figure 1 reveals many zeroes in groups, and some groups with a mean and variance of zero, further suggesting we need a non-normal error distribution, and perhaps something other than a Poisson distribution. We could calculate λ(mean) for each genotype × treatment combination and provide a statistical summary of each group’s λ. grp_means &lt;- with(dat_tf, tapply(total.fruits, list(gna), mean)) summary(grp_means) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 11.35 23.16 31.86 49.74 122.40 A core property of the Poisson distribution is that the variance is equal to the mean. A simple diagnostic is a plot of the group variances against the group means: Poisson-distributed data will result in a linear pattern with slope = 1 as long as the variance is generally greater than the mean, we call the data overdispersed. Overdispersion comes in various forms: a linear mean-variance relationship with Var = φµ (a line through the origin) with φ &gt; 1 is called a quasi-Poisson pattern (this term describes the mean-variance relationship, not any particular proability distribution); we can implement it statistically via quasilikelihood (Venables and Ripley, 2002) or by using a particular parameterization of the negative binomial distribution (“NB1” inthe terminology of Hardin and Hilbe (2007)) a semi-quadratic pattern, Var = µ(1 + αµ) or µ(1 + µ/k), is characteristic of overdispersed data that is driven by underlying heterogeneity among samples, either the negative binomial (gamma-Poisson) or the lognormal-Poisson (Elston et al. 2001) We’ve already calculated the group (genotype × treatment) means, we calculate the variances in the same way. grp_vars &lt;- with( dat_tf, tapply( total.fruits, list(gna), var ) ) We can get approximate estimates of the quasi-Poisson (linear) and negative binomial (linear/quadratic) pattern using lm. lm1 &lt;- lm(grp_vars ~ grp_means - 1) ## `quasi-Poisson&#39; fit phi_fit &lt;- coef(lm1) lm2 &lt;- lm((grp_vars - grp_means) ~ I(grp_means^2) - 1) k_fit &lt;- 1 / coef(lm2) Now we can plot them. plot(grp_vars ~ grp_means, xlab = &quot;group means&quot;, ylab = &quot;group variances&quot;) abline(c(0, 1), lty = 2) text(105, 500, &quot;Poisson&quot;) curve(phi_fit * x, col = 2, add = TRUE) ## bquote() is used to substitute numeric values ## in equations with symbols text(110, 3900, bquote(paste(&quot;QP: &quot;, sigma^2 == .(round(phi_fit, 1)) * mu)), col = 2 ) curve(x * (1 + x / k_fit), col = 4, add = TRUE) text(104, 7200, paste(&quot;NB: k=&quot;, round(k_fit, 1), sep = &quot;&quot;), col = 4) l_fit &lt;- loess(grp_vars ~ grp_means) mvec &lt;- 0:120 lines(mvec, predict(l_fit, mvec), col = 5) text(100, 2500, &quot;loess&quot;, col = 5) Figure 6.4: Graphical evaluation of distribution to use Same with ggplot ggplot( data.frame(grp_means, grp_vars), aes(x = grp_means, y = grp_vars)) + geom_point() + geom_smooth( aes(colour = &quot;Loess&quot;), se = FALSE) + geom_smooth( method = &quot;lm&quot;, formula = y ~ x - 1, se = FALSE, aes(colour = &quot;Q_Pois&quot;)) + stat_function( fun = function(x) x * (1 + x / k_fit), aes(colour = &quot;Neg_bin&quot;) ) + geom_abline( aes(intercept = 0, slope = 1, colour = &quot;Poisson&quot;)) + scale_colour_manual( name = &quot;legend&quot;, values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;red&quot;)) + scale_fill_manual( name = &quot;legend&quot;, values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;red&quot;)) + guides(fill = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Figure 6.5: Graphical evaluation of distribution to use with ggplot These fits are not rigorous statistical tests — they violate a variety of assumptions of linear regression (e.g. constant variance, independence), but they are good enough to give us an initial guess about what distributions we should use. Exercise compare a simple quadratic fit to the data (i.e., without the linear part) with the negative binomial and quasipoisson fits lm3 &lt;- lm(grp_vars ~ I(grp_means)^2 - 1) ## quadratic fit quad_fit &lt;- coef(lm3) ggplot( data.frame(grp_means, grp_vars), aes(x = grp_means, y = grp_vars)) + geom_point() + geom_smooth( method = &quot;lm&quot;, formula = y ~ x - 1, se = FALSE, aes(colour = &quot;Q_Pois&quot;)) + stat_function( fun = function(x) x * (1 + x / k_fit), aes(colour = &quot;Neg_bin&quot;) ) + geom_smooth( method = &quot;lm&quot;, formula = y ~ I(x^2) - 1, se = FALSE, aes(colour = &quot;Quad&quot;)) + scale_colour_manual( name = &quot;legend&quot;, values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;black&quot;)) + scale_fill_manual( name = &quot;legend&quot;, values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;black&quot;)) + guides(fill = FALSE) Figure 6.6: Graphical evaluation of distribution to use including quadratic effect 6.1.5.1 Plotting the response vs treatments Just to avoid surprises ggplot(dat_tf, aes(x = amd, y = log(total.fruits + 1), colour = nutrient)) + geom_point() + ## need to use as.numeric(amd) to get lines stat_summary(aes(x = as.numeric(amd)), fun = mean, geom = &quot;line&quot;) + theme_bw() + theme(panel.spacing = unit(0, &quot;lines&quot;)) + facet_wrap(~popu) Figure 6.7: Fruit production by treatments by population ggplot(dat_tf, aes(x = amd, y = log(total.fruits + 1), colour = gen)) + geom_point() + stat_summary(aes(x = as.numeric(amd)), fun = mean, geom = &quot;line&quot;) + theme_bw() + ## label_both adds variable name (&#39;nutrient&#39;) to facet labels facet_grid(. ~ nutrient, labeller = label_both) Figure 6.8: Fruit production by genotype by treatments 6.1.6 Fitting group-wise GLM Another general starting approach is to fit GLMs to each group of data separately, equivalent to treating the grouping variables as fixed effects. This should result in reasonable variation among treatment effects. We first fit the models, and then examine the coefficients. glm_lis &lt;- lmList( total.fruits ~ nutrient * amd | gen, data = dat_tf, family = &quot;poisson&quot;) plot.lmList(glm_lis) ## Loading required package: reshape ## ## Attaching package: &#39;reshape&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## rename ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, smiths ## The following object is masked from &#39;package:Matrix&#39;: ## ## expand ## Using grp as id variables Figure 6.9: Model coefficients for GLM fits on each genotype Three genotypes (5, 6, 34) have extreme coefficients (Fig. 5). A mixed model assumes that the underlying random effects are normally distributed, although we shouldn’t take these outliers too seriously at this point — we are not actually plotting the random effects, or even estimates of random effects (which are not themselves guaranteed to be normally distributed), but rather separate estimates for each group. Create a plotting function for Q-Q plots of these coefficients to visualize the departure from normality. qqmath.lmList(glm_lis) ## Using as id variables Figure 6.10: Q-Q plots of model coefficients for GLM fits on each genotype We see that these extreme coefficients fall far outside a normal error distribution. We shouldn’t take these outliers too seriously at this point — we are not actually plotting the random effects, or even estimates of random effects, but rather separate estimates for each group. Especially if these groups have relatively small sample sizes, the estimates may eventually be “shrunk” closer to the mean when we do the mixed model. We should nonetheless take care to see if the coefficients for these genotypes from the GLMM are still outliers, and take the same precautions as we usually do for outliers. For example, we can look back at the original data to see if there is something weird about the way those genotypes were collected, or try re-running the analysis without those genotypes to see if the results are robust. 6.1.7 Fitting and evaluating GLMMs Now we (try to) build and fit a full model, using glmer in the emo::ji(\"pacakage\") lme4. This model has random effects for all genotype and population × treatment random effects, and for the nuisance variables for the rack and germination method (status). (Given the mean-variance relationship we saw it’s pretty clear that we are going to have to proceed eventually to a model with overdispersion, but we fit the Poisson model first for illustration.) mp1 &lt;- glmer(total.fruits ~ nutrient * amd + rack + status + (amd * nutrient | popu) + (amd * nutrient | gen), data = dat_tf, family = &quot;poisson&quot; ) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.00550538 (tol = 0.002, component 1) overdisp_fun(mp1) ## chisq ratio p ## 13909.46583 23.25998 0.00000 We can ignore the model convergence for the moment. This shows that the data are (extremely) over-dispersed, given the model. Now we add the observation-level random effect to the model to account for overdispersion (Elston et al. 2001). mp2 &lt;- update(mp1, . ~ . + (1 | X)) ## Warning in (function (fn, par, lower = rep.int(-Inf, n), upper = rep.int(Inf, : failure to converge in 10000 evaluations ## Warning in optwrap(optimizer, devfun, start, rho$lower, control = control, : convergence code 4 from Nelder_Mead: failure to converge in 10000 evaluations ## boundary (singular) fit: see ?isSingular The model takes much longer to fit (and gives warnings). We look just at the variance components. In particular, if we look at the correlation matrix among the genotype random effects, we see a perfect correlation. attr(VarCorr(mp2)$gen, &quot;correlation&quot;) ## (Intercept) amdclipped nutrientHigh amdclipped:nutrientHigh ## (Intercept) 1.0000000 -1.0000000 -0.9856190 0.8102082 ## amdclipped -1.0000000 1.0000000 0.9856458 -0.8103030 ## nutrientHigh -0.9856190 0.9856458 1.0000000 -0.8975369 ## amdclipped:nutrientHigh 0.8102082 -0.8103030 -0.8975369 1.0000000 We’ll try getting rid of the correlations between clipping (amd) and nutrients, using amd+nutrient instead of amd*nutrient in the random effects specification (here it seems easier to re-do the model rather than using update to add and subtract terms). mp3 &lt;- glmer(total.fruits ~ nutrient * amd + rack + status + (amd + nutrient | popu) + (amd + nutrient | gen) + (1 | X), data = dat_tf, family = &quot;poisson&quot; ) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.216994 (tol = 0.002, component 1) attr(VarCorr(mp3)$gen, &quot;correlation&quot;) ## (Intercept) amdclipped nutrientHigh ## (Intercept) 1.0000000 -0.9998765 -0.9970119 ## amdclipped -0.9998765 1.0000000 0.9969756 ## nutrientHigh -0.9970119 0.9969756 1.0000000 attr(VarCorr(mp3)$popu, &quot;correlation&quot;) ## (Intercept) amdclipped nutrientHigh ## (Intercept) 1.0000000 0.9958238 0.9947419 ## amdclipped 0.9958238 1.0000000 0.9886630 ## nutrientHigh 0.9947419 0.9886630 1.0000000 Unfortunately, we still have perfect correlations among the random effects terms. For some models (e.g. random-slope models), it is possible to fit random effects models in such a way that the correlation between the different parameters (intercept and slope in the case of random-slope models) is constrained to be zero, by fitting a model like (1|f)+(0+x|f); unfortunately, because of the way lme4 is set up, this is considerably more difficult with categorical predictors (factors). We have to reduce the model further in some way in order not to overfit (i.e., in order to not have perfect ±1 correlations among random effects). It looks like we can’t allow both nutrients and clipping in the random effect model at either the population or the genotype level. However, it’s hard to know whether we should proceed with amd or nutrient, both, or neither in the model. A convenient way to proceed if we are going to try fitting several different combinations of random effects is to fit the model with all the fixed effects but only observation-level random effects, and then to use update to add various components to it. mp_obs &lt;- glmer(total.fruits ~ nutrient * amd + rack + status + (1 | X), data = dat_tf, family = &quot;poisson&quot; ) Now, for example, update(mp_obs,.~.+(1|gen)+(amd|popu)) fits the model with intercept random effects at the genotype level and variation in clipping effects across populations. Exercise using update, fit the models with clipping variation at both genotype and population levels; nutrient variation at both genotype and populations; convince yourself that trying to fit variation in either clipping or nutrients leads to overfitting (perfect correlations). Fit the model with only intercept variation at the population and genotype levels, saving it as mp4; show that there is non-zero variance estimated mpcli &lt;- update(mp_obs, . ~ . + (amd | gen) + (amd | popu)) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.115116 (tol = 0.002, component 1) VarCorr(mpcli) ## Groups Name Std.Dev. Corr ## X (Intercept) 1.429806 ## gen (Intercept) 0.296991 ## amdclipped 0.039336 -0.869 ## popu (Intercept) 0.752718 ## amdclipped 0.126028 0.995 mpnut &lt;- update(mp_obs, . ~ . + (nutrient | gen) + (nutrient | popu)) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.0204136 (tol = 0.002, component 1) VarCorr(mpnut) ## Groups Name Std.Dev. Corr ## X (Intercept) 1.41953 ## gen (Intercept) 0.47799 ## nutrientHigh 0.32458 -1.000 ## popu (Intercept) 0.74706 ## nutrientHigh 0.12042 1.000 mp4 &lt;- update(mp_obs, . ~ . + (1 | gen) + (1 | popu)) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.00263265 (tol = 0.002, component 1) VarCorr(mp4) ## Groups Name Std.Dev. ## X (Intercept) 1.43113 ## gen (Intercept) 0.28577 ## popu (Intercept) 0.80616 In other words, while it’s biologically plausible that there is some variation in the nutrient or clipping effect at the genotype or population levels, with this modeling approach we really don’t have enough data to speak confidently about these effects. Let’s check that mp4 no longer incorporates overdispersion (the observationlevel random effect should have taken care of it): overdisp_fun(mp4) ## chisq ratio p ## 177.5567880 0.2887102 1.0000000 6.1.8 Inference 6.1.8.1 Random effects glmer (lmer) does not return information about the standard errors or confidence intervals of the variance components. VarCorr(mp4) ## Groups Name Std.Dev. ## X (Intercept) 1.43113 ## gen (Intercept) 0.28577 ## popu (Intercept) 0.80616 6.1.8.1.1 Testing for random Effects If we want to test the significance of the random effects we can fit reduced models and run likelihood ratio tests via anova, keeping in mind that in this case (testing a null hypothesis of zero variance, where the parameter is on the boundary of its feasible region) the reported p value is approximately twice what it should be. mp4v1 &lt;- update(mp_obs, . ~ . + (1 | popu)) ## popu only (drop gen) mp4v2 &lt;- update(mp_obs, . ~ . + (1 | gen)) ## gen only (drop popu) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model failed to converge with max|grad| = 0.105093 (tol = 0.002, component 1) ## Warning in checkConv(attr(opt, &quot;derivs&quot;), opt$par, ctrl = control$checkConv, : Model is nearly unidentifiable: very large eigenvalue ## - Rescale variables? anova(mp4, mp4v1) ## Data: dat_tf ## Models: ## mp4v1: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp4v1: popu) + nutrient:amd ## mp4: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp4: gen) + (1 | popu) + nutrient:amd ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## mp4v1 9 5017.4 5057.4 -2499.7 4999.4 ## mp4 10 5015.4 5059.8 -2497.7 4995.4 4.0638 1 0.04381 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(mp4, mp4v2) ## Data: dat_tf ## Models: ## mp4v2: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp4v2: gen) + nutrient:amd ## mp4: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp4: gen) + (1 | popu) + nutrient:amd ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## mp4v2 9 5031.6 5071.5 -2506.8 5013.6 ## mp4 10 5015.4 5059.8 -2497.7 4995.4 18.212 1 1.976e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 For various forms of linear mixed models, the RLRsim package can do efficient simulation-based hypothesis testing of variance components — un- fortunately, that doesn’t include GLMMs. If we are sufficiently patient we can do hypothesis testing via brute-force parametric bootstrapping where we repeatedly simulate data from the reduced (null) model, fit both the re- duced and full models to the simulated data, and compute the distribution of the deviance (change in -2 log likelihood). The code below took about half an hour on a reasonably modern desktop computer. simdev &lt;- function() { newdat &lt;- simulate(mp4v1) reduced &lt;- lme4::refit(mp4v1, newdat) full &lt;- lme4::refit(mp4, newdat) 2 * (c(logLik(full) - logLik(reduced))) } set.seed(101) nulldist0 &lt;- replicate(2, simdev()) ## zero spurious (small) negative values nulldist[nulldist &lt; 0 &amp; abs(nulldist) &lt; 1e-5] &lt;- 0 obsdev &lt;- 2 * c(logLik(mp4) - logLik(mp4v1)) mean(c(nulldist, obsdev) &gt;= obsdev) ## [1] 0.01492537 The true p-value is actually closer to 0.05 than 0.02. In other words, here the deviations from the original statistical model from that for which the original “p value is inflated by 2” rule of thumb was derived — fitting a GLMM instead of a LMM, and using a moderate-sized rather than an arbitrarily large (asymptotic) data set — have made the likelihood ratio test liberal (increased type I error) rather than conservative (decreased type I error). We can also inspect the random effects estimates themselves (in proper statistical jargon, these might be considered “predictions” rather than “estimates” (Robinson, 1991)). We use the built-in dotplot method for the random effects extracted from glmer fits (i.e. ranef(model,condVar=TRUE)), which returns a list of plots, one for each random effect level in the model. r1 &lt;- as.data.frame(ranef(mp4, condVar = TRUE, whichel = c(&quot;gen&quot;, &quot;popu&quot;))) p1 &lt;- ggplot(subset(r1, grpvar == &quot;gen&quot;), aes(y = grp, x = condval)) + geom_point() + geom_pointrange( aes(xmin = condval - condsd * 1.96, xmax = condval + condsd * 1.96) ) + geom_vline(aes(xintercept = 0, color = &quot;red&quot;)) + theme_classic() + theme(legend.position = &quot;none&quot;) p2 &lt;- ggplot(subset(r1, grpvar == &quot;popu&quot;), aes(y = grp, x = condval)) + geom_point() + geom_pointrange( aes(xmin = condval - condsd * 1.96, xmax = condval + condsd * 1.96) ) + geom_vline(aes(xintercept = 0, color = &quot;red&quot;)) + theme_classic() + theme(legend.position = &quot;none&quot;) p1 + p2 Figure 6.11: Distribution of BLUPs for genotypes and populations As expected from the similarity of the variance estimates, the population-level estimates (the only shared component) do not differ much between the two models. There is a hint of regional differentiation — the Spanish populations have higher fruit sets than the Swedish and Dutch populations. Genotype 34 again looks a little bit unusual. 6.1.8.2 Fixed effects Now we want to do inference on the fixed effects. We use the drop1 func- tion to assess both the AIC difference and the likelihood ratio test between models. (In glmm_funs.R we define a convenience function dfun to convert the AIC tables returned by drop1 (which we will create momentarily) into ∆AIC tables.) Although the likelihood ratio test (and the AIC) are asymptotic tests, comparing fits between full and reduced models is still more accurate than the Wald (curvature-based) tests shown in the summary tables for glmer fits. (dd_aic &lt;- dfun(drop1(mp4))) ## Single term deletions ## ## Model: ## total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## gen) + (1 | popu) + nutrient:amd ## npar dAIC ## &lt;none&gt; 0.000 ## rack 1 55.083 ## status 2 1.612 ## nutrient:amd 1 1.444 (dd_lrt &lt;- drop1(mp4, test = &quot;Chisq&quot;)) ## Single term deletions ## ## Model: ## total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## gen) + (1 | popu) + nutrient:amd ## npar AIC LRT Pr(Chi) ## &lt;none&gt; 5015.4 ## rack 1 5070.5 57.083 4.179e-14 *** ## status 2 5017.0 5.612 0.06044 . ## nutrient:amd 1 5016.8 3.444 0.06349 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 On the basis of these comparisons, there appears to be a very strong effect of rack and weak effects of status and of the interaction term. Dropping the nutrient:amd interaction gives a (slightly) increased AIC (∆AIC = 1.4), so the full model has the best expected predictive capability (by a small margin). On the other hand, the p-value is slightly above 0.05 (p = 0.06). At this point we remove the non-significant interaction term so we can test the main effects. (We don’t worry about removing status because it measures an aspect of experimental design that we want to leave in the model whether it is significant or not.) Once we have fitted the reduced model, we can run the LRT via anova. mp5 &lt;- update(mp4, . ~ . - amd:nutrient) anova(mp5, mp4) ## Data: dat_tf ## Models: ## mp5: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp5: gen) + (1 | popu) ## mp4: total.fruits ~ nutrient + amd + rack + status + (1 | X) + (1 | ## mp4: gen) + (1 | popu) + nutrient:amd ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## mp5 9 5016.8 5056.8 -2499.4 4998.8 ## mp4 10 5015.4 5059.8 -2497.7 4995.4 3.4438 1 0.06349 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Exercise Test now the reduced model. In the reduced model, we find that both nutrients and clipping have strong effects, whether measured by AIC or LRT. If we wanted to be still more careful about our interpretation, we would try to relax the asymptotic assumption. In classical linear models, we would do this by doing F tests with the appropriate denominator degrees of freedom. In “modern” mixed model approaches, we might try to use denominator-degree-of-freedom approximations such as the Kenward-Roger (despite the controversy over these approximations, they are actually available in lmerTest, but they do not apply to GLMMs. We can use a parametric bootstrap comparison between nested models to test fixed effects, as we did above for random effects, with the caveat that is computationally slow. In addition, we can check the normality of the random effects and find they are reasonable (Fig. 10). r5 &lt;- as.data.frame(ranef(mp5)) ggplot(data = r5, aes(sample = condval)) + geom_qq() + geom_qq_line() + facet_wrap(~ grpvar) + theme_classic() Figure 6.12: Q-Q plot of BLUPs from model mp5 6.1.9 Conclusions Our final model includes fixed effects of nutrients and clipping, as well as the nuisance variables rack and status; observation-level random effects to ac- count for overdispersion; and variation in overall fruit set at the population and genotype levels. However, we don’t (apparently) have quite enough in- formation to estimate the variation in clipping and nutrient effects, or their interaction, at the genotype or population levels. There is a strong overall positive effect of nutrients and a slightly weaker negative effect of clipping. The interaction between clipping and nutrients is only weakly supported (i.e. the p-value is not very small), but it is positive and about the same magnitude as the clipping effect, which is consistent with the statement that “nutrients cancel out the effect of herbivory.” Exercise Re-do the analysis with region as a fixed effect. Re-do the analysis with a one-way layout as suggested above "],["6-2-happy-generalized-mixed-modelling.html", "6.2 Happy generalized mixed-modelling", " 6.2 Happy generalized mixed-modelling Figure 6.13: A GLMM character "],["7-introduction-to-bayesian-inference.html", "7 Introduction to Bayesian Inference ", " 7 Introduction to Bayesian Inference "],["7-1-theory.html", "7.1 theory", " 7.1 theory 7.1.1 Bayes’ theorem First, let’s review the theorem. Mathematically, it says how to convert one conditional probability into another one. \\[ P(B \\mid A) = \\frac{ P(A \\mid B) * P(B)}{P(A)} \\] The formula becomes more interesting in the context of statistical modeling. We have some model that describes a data-generating process and we have some observed data, but we want to estimate some unknown model parameters. In that case, the formula reads like: \\[ P(\\text{hypothesis} \\mid \\text{data}) = \\frac{ P(\\text{data} \\mid \\text{hypothesis}) * P(\\text{hypothesis})}{P(\\text{data})} \\] These terms have conventional names: \\[ \\text{posterior} = \\frac{ \\text{likelihood} * \\text{prior}}{\\text{evidence}} \\] Prior and posterior describe when information is obtained: what we know pre-data is our prior information, and what we learn post-data is the updated information (“posterior”). The likelihood in the equation says how likely the data is given the model parameters. I think of it as fit: How well do the parameters fit the data? Classical regression’s line of best fit is the maximum likelihood line. The likelihood also encompasses the data-generating process behind the model. For example, if we assume that the observed data is normally distributed, then we evaluate the likelihood by using the normal probability density function. You don’t need to know what that last sentence means. What’s important is that the likelihood contains our built-in assumptions about how the data is distributed. The evidence (sometimes called average likelihood) is hareder to grasp. I am not sure how to describe it in an intuitive way. It’s there to make sure the math works out so that the posterior probabilities sum to 1. Some presentations of Bayes’ theorem gloss over it and I am not the exception 😄. The important thing to note is that the posterior is proportional to the likelihood and prior information. \\[ \\text{posterior information} \\propto \\text{likelihood of data} * \\text{prior information} \\] So simply put, you update your prior information in proportion to how well it fits the observed data. So essentially you are doing that on a daily basis for everything except when you ar doing frequentist stats 😄. Figure 7.1: Bayesian Triptych A word of encouragement! The prior is an intimidating part of Bayesian statistics. It seems highly subjective, as though we are pulling numbers from thin air, and it can be overwhelming for complex models. But if we are familiar with the kind of data we are modeling, we have prior information. We can have the model simulate new observations using the prior distribution and then plot the hypothetical data. Does anything look wrong or implausible about the simulated data? If so, then we have some prior information that we can include in our model. Note that we do not evaluate the plausibility of the simulated data based on the data we have in hand (the data we want to model); that’s not prior information. 7.1.2 Intro to MCMC We will now walk through a simple example coded in R to illustrate how an MCMC algorithm works. Suppose you are interested in the mean heart rate is of students when asked a question in a stat course. You are not sure what the exact mean value is, but you know the values are normally distributed with a standard deviation of 15. You have observed 5 individuals to have heart rate of 104, 120,160,90,130. You could use MCMC sampling to draw samples from the target distribution. We need to specify: the starting value for the chain. the length of the chain. In general, more iterations will give you more accurate output. set.seed(170) hr_obs &lt;- c(104, 112, 132, 115, 110) start_value &lt;- 250 n_iter &lt;- 2500 # define number of iterations pd_mean &lt;- numeric(n_iter) # create vector for sample values pd_mean[1] &lt;- start_value # define starting value for (i in 2:n_iter) { proposal &lt;- pd_mean[i - 1] + MASS::mvrnorm(1, 0, 5) # proposal lprop &lt;- sum(dnorm(proposal, hr_obs, 15)) # likelihood of proposed parameter lprev &lt;- sum(dnorm(pd_mean[i - 1], hr_obs, 15)) if (lprop / lprev &gt; runif(1)) { # if likelihood of prosposed &gt; likehood previous accept # and if likelihood is lower accept with random noise pd_mean[i] &lt;- proposal } # if true sample the proposal else { (pd_mean[i] &lt;- pd_mean[i - 1]) } # if false sample the current value } pd_mean &lt;- as.mcmc(data.frame(mean = pd_mean)) mcmc_combo(pd_mean, combo = c(&quot;trace&quot;, &quot;dens&quot;)) summary(pd_mean) ## ## Iterations = 1:2500 ## Thinning interval = 1 ## Number of chains = 1 ## Sample size per chain = 2500 ## ## 1. Empirical mean and standard deviation for each variable, ## plus standard error of the mean: ## ## Mean SD Naive SE Time-series SE ## 125.8105 32.8672 0.6573 13.3046 ## ## 2. Quantiles for each variable: ## ## 2.5% 25% 50% 75% 97.5% ## 75.53 108.03 122.19 136.12 225.46 set.seed(170) hr_obs &lt;- c(104, 112, 132, 115, 110) n_iter &lt;- 2500 # define number of iterations n_chain &lt;- 3 start_value &lt;- c(250, 100, 50) pd_mean &lt;- array(NA, dim= c(n_iter, n_chain, 1), dimnames=list(iter = NULL, chain = NULL, params = &quot;beta&quot;) )# create vector for sample values for (j in seq_len(n_chain)) { pd_mean[1,j,1] &lt;- start_value[j] # define starting value for (i in 2:n_iter) { proposal &lt;- pd_mean[i - 1, j, 1] + MASS::mvrnorm(1, 0, 5) # proposal if (sum(dnorm(proposal, hr_obs, 15)) # likelihood of proposed parameter / sum(dnorm(pd_mean[i - 1, j, 1], hr_obs, 15)) &gt; runif(1, 0, 1)) { pd_mean[i, j, 1] &lt;- proposal } # if true sample the proposal else { (pd_mean[i, j, 1] &lt;- pd_mean[i - 1, j , 1]) } # if false sample the current value } } color_scheme_set(&quot;mix-blue-red&quot;) mcmc_combo(pd_mean, combo = c(&quot;trace&quot;, &quot;dens_overlay&quot;)) summary(pd_mean) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 41.65 99.32 109.68 112.71 122.52 250.00 mcmc_combo(pd_mean, combo = c(&quot;trace&quot;, &quot;dens_overlay&quot;), n_warmup = 500) pd_burn &lt;- pd_mean[-c(1:500), , , drop = FALSE] summary(pd_burn) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 51.98 100.71 110.38 111.42 122.69 163.58 mcmc_combo(pd_burn, combo = c(&quot;trace&quot;, &quot;dens_overlay&quot;), iter1 = 501) 7.1.3 Inferences 7.1.3.1 Fixed effects Easy peazy lemon squeezy just have a look at the posteriro distribution, does it overlap 0 yes or no. talk about mean, median and mode of a distribution as well as credible intervals 7.1.3.2 Random effects Quite a bit more harder. because constrained to be positive Interpreting posterior distribution DIC WAIC "],["7-2-practical-4.html", "7.2 Practical", " 7.2 Practical In this practical, we will revisit our analysis on unicorn aggressivity. Honestly, we can use any other data with repeated measures for this exercise but I just love unicorns ❤️. However, instead of fittng the model using lmer() from the lmerTest 📦 (Kuznetsova et al. 2020), we will refit the model using 2 excellent softwares fitting models with a Bayesian approach: MCMCglmm (Hadfield 2010) and brms (Bürkner 2020). 7.2.1 R packages needed First we load required libraries library(lmerTest) library(tidyverse) library(rptR) library(brms) library(MCMCglmm) library(bayesplot) 7.2.2 A refresher on unicorn ecology The last model on unicorns was: aggression ~ opp_size + scale(body_size, center = TRUE, scale = TRUE) + scale(assay_rep, scale = FALSE) + block + (1 | ID) Those scaled terms are abit a sore for my eyes and way too long if we need to type them multiple times in this practical. So first let’s recode them. - unicorns &lt;- read.csv(&quot;data/unicorns_aggression.csv&quot;) unicorns &lt;- unicorns %&gt;% mutate( body_size_sc = scale(body_size), assay_rep_sc = scale(assay_rep, scale = FALSE) ) Ok now we can fit the same model by just using: aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID) We can now fit a model using lmer(). Since we want to compare a bit REML and Bayesian aproaches, I am going to wrap the model function in a function called system.time(). This function simply estimate the user and computer time use by the function. mer_time &lt;- system.time( m_mer &lt;- lmer( aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID), data = unicorns) ) mer_time ## user system elapsed ## 0.057 0.004 0.062 summary(m_mer) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID) ## Data: unicorns ## ## REML criterion at convergence: 1136.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.85473 -0.62831 0.02545 0.68998 2.74064 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 0.02538 0.1593 ## Residual 0.58048 0.7619 ## Number of obs: 480, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.00181 0.03907 78.07315 230.395 &lt;2e-16 *** ## opp_size 1.05141 0.04281 396.99857 24.562 &lt;2e-16 *** ## body_size_sc 0.03310 0.03896 84.21144 0.850 0.398 ## assay_rep_sc -0.05783 0.04281 396.99857 -1.351 0.177 ## block -0.02166 0.06955 397.00209 -0.311 0.756 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) opp_sz bdy_s_ assy__ ## opp_size 0.000 ## body_siz_sc 0.000 0.000 ## assay_rp_sc 0.000 -0.100 0.000 ## block 0.000 0.000 0.002 0.000 Ok so it took no time at all to do it and we got our “classic” results. 7.2.3 MCMCglmm What makes MCMCglmm so useful and powerful 💪 in ecology and for practical Bayesian people is that: it is blazing fast ⏩ (for Bayesian analysis) for some models particularly models with structured covariances it is fairly intuitive to code but it also has some inconvenients: it is blazing fast for Bayesian analysis meaning it is 🐌 compared to maximum likelihood approaches it has some limitations in terms of functionality, distribution availability and model specifications compared to other Bayesian softwares the priors, oh, the priors 😭, are a bit tricky to code and understand 🤯. 7.2.3.1 Fitting the Model So here is how we can code the model in MCMCglmm(). It is fairly similar to lmer() except that the random effects are specified in a different argument. mcglm_time &lt;- system.time( m_mcmcglmm &lt;- MCMCglmm( aggression ~ opp_size + body_size_sc + assay_rep_sc + block, random = ~ ID, data = unicorns) ) ## ## MCMC iteration = 0 ## ## MCMC iteration = 1000 ## ## MCMC iteration = 2000 ## ## MCMC iteration = 3000 ## ## MCMC iteration = 4000 ## ## MCMC iteration = 5000 ## ## MCMC iteration = 6000 ## ## MCMC iteration = 7000 ## ## MCMC iteration = 8000 ## ## MCMC iteration = 9000 ## ## MCMC iteration = 10000 ## ## MCMC iteration = 11000 ## ## MCMC iteration = 12000 ## ## MCMC iteration = 13000 summary(m_mcmcglmm) ## ## Iterations = 3001:12991 ## Thinning interval = 10 ## Sample size = 1000 ## ## DIC: 1128.004 ## ## G-structure: ~ID ## ## post.mean l-95% CI u-95% CI eff.samp ## ID 0.003686 9.807e-14 0.0262 45.81 ## ## R-structure: ~units ## ## post.mean l-95% CI u-95% CI eff.samp ## units 0.6044 0.5228 0.6819 1000 ## ## Location effects: aggression ~ opp_size + body_size_sc + assay_rep_sc + block ## ## post.mean l-95% CI u-95% CI eff.samp pMCMC ## (Intercept) 9.00152 8.93150 9.07158 1000 &lt;0.001 *** ## opp_size 1.04940 0.96813 1.12946 1000 &lt;0.001 *** ## body_size_sc 0.03154 -0.03985 0.09563 1000 0.410 ## assay_rep_sc -0.05620 -0.13196 0.03546 893 0.184 ## block -0.02069 -0.16186 0.11553 1000 0.774 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 mcglm_time ## user system elapsed ## 1.538 0.000 1.538 Model is slow and not good. We need more iteration and maybe even a longer burnin, and honestly maybe better priors. plot(m_mcmcglmm$Sol) Figure 7.2: Posterior trace and distribution of the paremeters in m_mcmcglmm using default settings Figure 7.3: Posterior trace and distribution of the paremeters in m_mcmcglmm using default settings plot(m_mcmcglmm$VCV) Figure 7.4: Posterior trace and distribution of the paremeters in m_mcmcglmm using default settings autocorr.diag(m_mcmcglmm$VCV) ## ID units ## Lag 0 1.0000000 1.00000000 ## Lag 10 0.8042405 -0.02074155 ## Lag 50 0.4807583 -0.04264317 ## Lag 100 0.1951356 0.04422296 ## Lag 500 0.1254589 0.04401956 Talk about autocorrelation, mixing, convergence and priors here n_samp &lt;- 1000 thin &lt;- 500 burnin &lt;- 20000 mcglm_time &lt;- system.time( m_mcmcglmm &lt;- MCMCglmm( aggression ~ opp_size + body_size_sc + assay_rep_sc + block, random = ~ ID, data = unicorns, nitt = n_samp * thin + burnin, thin = thin, burnin = burnin, verbose = FALSE, prior = list( R = list(V = 1, nu = 0.002), G = list( G1 = list(V = 1, nu = 0.002) ) ) ) ) summary(m_mcmcglmm) ## ## Iterations = 20001:519501 ## Thinning interval = 500 ## Sample size = 1000 ## ## DIC: 1126.66 ## ## G-structure: ~ID ## ## post.mean l-95% CI u-95% CI eff.samp ## ID 0.01987 0.0002904 0.05458 1000 ## ## R-structure: ~units ## ## post.mean l-95% CI u-95% CI eff.samp ## units 0.5917 0.5188 0.6763 1000 ## ## Location effects: aggression ~ opp_size + body_size_sc + assay_rep_sc + block ## ## post.mean l-95% CI u-95% CI eff.samp pMCMC ## (Intercept) 9.00136 8.92221 9.07383 1000 &lt;0.001 *** ## opp_size 1.05363 0.96382 1.13650 1000 &lt;0.001 *** ## body_size_sc 0.03373 -0.03781 0.10686 1000 0.396 ## assay_rep_sc -0.05861 -0.14186 0.02882 1000 0.182 ## block -0.02709 -0.16061 0.11441 1000 0.698 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 mcglm_time ## user system elapsed ## 70.746 0.032 70.848 evaluate model here plot(m_mcmcglmm$Sol) Figure 7.5: Posterior trace and distribution of the paremeters in m_mcmcglmm with better settings Figure 7.6: Posterior trace and distribution of the paremeters in m_mcmcglmm with better settings plot(m_mcmcglmm$VCV) Figure 7.7: Posterior trace and distribution of the paremeters in m_mcmcglmm with better settings autocorr.diag(m_mcmcglmm$VCV) ## ID units ## Lag 0 1.000000000 1.000000000 ## Lag 500 0.013876043 -0.044235206 ## Lag 2500 0.026120260 -0.048012241 ## Lag 5000 -0.049357725 0.021158672 ## Lag 25000 0.002544256 -0.003722595 7.2.4 Inferences 7.2.4.1 Fixed effects Easy peazy lemon squeezy just have a look at the posteriro distribution, does it overlap 0 yes or no. posterior.mode(m_mcmcglmm$Sol) ## (Intercept) opp_size body_size_sc assay_rep_sc block ## 9.00632282 1.07353252 0.03500916 -0.04048582 -0.03276275 HPDinterval(m_mcmcglmm$Sol) ## lower upper ## (Intercept) 8.92221005 9.07383400 ## opp_size 0.96382086 1.13649873 ## body_size_sc -0.03781276 0.10685606 ## assay_rep_sc -0.14185602 0.02882443 ## block -0.16060691 0.11440706 ## attr(,&quot;Probability&quot;) ## [1] 0.95 7.2.4.2 Random effects Quite a bit more harder. because constrained to be positive posterior.mode(m_mcmcglmm$VCV) ## ID units ## 0.00096263 0.59129362 HPDinterval(m_mcmcglmm$VCV) ## lower upper ## ID 0.0002903938 0.05458376 ## units 0.5188238599 0.67634529 ## attr(,&quot;Probability&quot;) ## [1] 0.95 7.2.5 brms brms is an acronym for Bayesian Regression Models using ‘Stan’ (Bürkner 2020). It is a package developed to fit regression models with a Bayesian approach using the amazing stan software (Stan Development Team 2021). What makes brms so useful and powerful 💪 in ecology is that: it is really intuitive to code (same syntax as glmer()) it is incredibly flexible since it is essentially a front end for stan via its rstan interface (Guo et al. 2020) but with great powers come great responsability 🕷 brm_time &lt;- system.time( m_brm &lt;- brm( aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID), data = unicorns, iter = 4750, warmup = 1000, thin = 15, cores =4 #refresh = 0 ) ) ## Compiling Stan program... ## Start sampling brm_time ## user system elapsed ## 64.671 4.515 83.047 summary(m_brm) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID) ## Data: unicorns (Number of observations: 480) ## Samples: 4 chains, each with iter = 4750; warmup = 1000; thin = 15; ## total post-warmup samples = 1000 ## ## Group-Level Effects: ## ~ID (Number of levels: 80) ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sd(Intercept) 0.14 0.07 0.01 0.27 1.00 933 824 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## Intercept 9.00 0.04 8.93 9.07 1.00 1124 1057 ## opp_size 1.05 0.04 0.97 1.13 1.00 968 995 ## body_size_sc 0.04 0.04 -0.04 0.12 1.00 965 808 ## assay_rep_sc -0.06 0.04 -0.15 0.03 1.00 968 938 ## block -0.02 0.07 -0.15 0.12 1.01 784 988 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.77 0.03 0.72 0.82 1.00 1051 990 ## ## Samples were drawn using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). mcmc_acf_bar(m_brm, regex_pars = c(&quot;sd&quot;)) Figure 7.8: Autocorrelation in the chain for variance parameters in model m_brm 7.2.5.1 Hunder the hood have a look at the stan code stancode(m_brm) ## // generated with brms 2.14.4 ## functions { ## } ## data { ## int&lt;lower=1&gt; N; // total number of observations ## vector[N] Y; // response variable ## int&lt;lower=1&gt; K; // number of population-level effects ## matrix[N, K] X; // population-level design matrix ## // data for group-level effects of ID 1 ## int&lt;lower=1&gt; N_1; // number of grouping levels ## int&lt;lower=1&gt; M_1; // number of coefficients per level ## int&lt;lower=1&gt; J_1[N]; // grouping indicator per observation ## // group-level predictor values ## vector[N] Z_1_1; ## int prior_only; // should the likelihood be ignored? ## } ## transformed data { ## int Kc = K - 1; ## matrix[N, Kc] Xc; // centered version of X without an intercept ## vector[Kc] means_X; // column means of X before centering ## for (i in 2:K) { ## means_X[i - 1] = mean(X[, i]); ## Xc[, i - 1] = X[, i] - means_X[i - 1]; ## } ## } ## parameters { ## vector[Kc] b; // population-level effects ## real Intercept; // temporary intercept for centered predictors ## real&lt;lower=0&gt; sigma; // residual SD ## vector&lt;lower=0&gt;[M_1] sd_1; // group-level standard deviations ## vector[N_1] z_1[M_1]; // standardized group-level effects ## } ## transformed parameters { ## vector[N_1] r_1_1; // actual group-level effects ## r_1_1 = (sd_1[1] * (z_1[1])); ## } ## model { ## // likelihood including all constants ## if (!prior_only) { ## // initialize linear predictor term ## vector[N] mu = Intercept + rep_vector(0.0, N); ## for (n in 1:N) { ## // add more terms to the linear predictor ## mu[n] += r_1_1[J_1[n]] * Z_1_1[n]; ## } ## target += normal_id_glm_lpdf(Y | Xc, mu, b, sigma); ## } ## // priors including all constants ## target += student_t_lpdf(Intercept | 3, 8.9, 2.5); ## target += student_t_lpdf(sigma | 3, 0, 2.5) ## - 1 * student_t_lccdf(0 | 3, 0, 2.5); ## target += student_t_lpdf(sd_1 | 3, 0, 2.5) ## - 1 * student_t_lccdf(0 | 3, 0, 2.5); ## target += std_normal_lpdf(z_1[1]); ## } ## generated quantities { ## // actual population-level intercept ## real b_Intercept = Intercept - dot_product(means_X, b); ## } 7.2.5.2 using shiny launch_shinystan(m_brm) Figure 7.9: Shinystan interface 7.2.6 Inferences 7.2.6.1 Fixed effects summary(m_brm) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID) ## Data: unicorns (Number of observations: 480) ## Samples: 4 chains, each with iter = 4750; warmup = 1000; thin = 15; ## total post-warmup samples = 1000 ## ## Group-Level Effects: ## ~ID (Number of levels: 80) ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sd(Intercept) 0.14 0.07 0.01 0.27 1.00 933 824 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## Intercept 9.00 0.04 8.93 9.07 1.00 1124 1057 ## opp_size 1.05 0.04 0.97 1.13 1.00 968 995 ## body_size_sc 0.04 0.04 -0.04 0.12 1.00 965 808 ## assay_rep_sc -0.06 0.04 -0.15 0.03 1.00 968 938 ## block -0.02 0.07 -0.15 0.12 1.01 784 988 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.77 0.03 0.72 0.82 1.00 1051 990 ## ## Samples were drawn using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). mcmc_plot(m_brm, regex_pars = &quot;b_&quot;) Figure 7.10: Fixed effect estimates (with 95% credible intervals) from model m_brm 7.2.6.2 Random effects summary(m_brm) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: aggression ~ opp_size + body_size_sc + assay_rep_sc + block + (1 | ID) ## Data: unicorns (Number of observations: 480) ## Samples: 4 chains, each with iter = 4750; warmup = 1000; thin = 15; ## total post-warmup samples = 1000 ## ## Group-Level Effects: ## ~ID (Number of levels: 80) ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sd(Intercept) 0.14 0.07 0.01 0.27 1.00 933 824 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## Intercept 9.00 0.04 8.93 9.07 1.00 1124 1057 ## opp_size 1.05 0.04 0.97 1.13 1.00 968 995 ## body_size_sc 0.04 0.04 -0.04 0.12 1.00 965 808 ## assay_rep_sc -0.06 0.04 -0.15 0.03 1.00 968 938 ## block -0.02 0.07 -0.15 0.12 1.01 784 988 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS ## sigma 0.77 0.03 0.72 0.82 1.00 1051 990 ## ## Samples were drawn using sampling(NUTS). For each parameter, Bulk_ESS ## and Tail_ESS are effective sample size measures, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). mcmc_plot(m_brm, pars = c(&quot;sd_ID__Intercept&quot;, &quot;sigma&quot;)) Figure 7.11: Among-individual and residual standard deviance ( with 95% credible intervals) estimated from model m_brm "],["7-3-happy-bayesian-stats.html", "7.3 Happy Bayesian stats", " 7.3 Happy Bayesian stats Figure 7.12: Sherlock Holmes, a truly bayesian detective "],["8-random-regressions-and-multivariate-mixed-models.html", "8 Random regressions and multivariate mixed models ", " 8 Random regressions and multivariate mixed models "],["8-1-theory-1.html", "8.1 theory", " 8.1 theory Amazing beasties and crazy animals Figure 8.1: Dream pet dragon "],["8-2-practical-5.html", "8.2 Practical", " 8.2 Practical In this practical, we have collected data on the amazing blue dragon of the west that roam the sky at night. We will use two different 📦 to fit more complex models that are not possible with lmer() from lme4 📦 (Bates et al. 2020). We will use: asreml-R which is a commercial software developped by VSNi (Butler 2020). ASReml fit models using a maxiumum likelihood approach, is quite flexible and fast. MCMCglmm which is free and open-source and fit model using a Bayesian approach (Hadfield 2010). It is super flexible and allow to fit a wide diversity of distribution. The aims of the practical are to learn: How to phrase questions of interest in terms of variances and covariances (or derived correlations or regressions); How to incorporate more advanced model structures, such as: Fixed effects that apply only to a subset of the response traits; Traits which are measured a different number of times (e.g., repeated measures of behaviour and a single value of breeding success); Hypothesis testing using likelihood ratio tests. 8.2.1 R packages needed First we load required libraries library(lmerTest) library(tidyverse) library(asreml) library(MCMCglmm) library(nadiv) 8.2.2 The blue dragon of the west For this practical, we have collected data on the amazing blue dragon of the west that roam the sky at night. Figure 8.2: Blue dragon male We tagged all dragons individually when they hatch from their eggs. Here, we concentrate on female dragon that produce a single clucth of eggs per mating seasons. Adult femlae blue dragons need to explore vast amount of land to find a compatible male. We thus hypothesized that maximum flight speed as well as exploration are key traits to determine fitness. We were able to obtain repeated measures of flying speed and exploration on 80 adult females during one mating season and also measure the number of egg layed at the end of the season. Each females was capture 4 times during the season and each time we measured the maximum flying speed using a wind tunnel and exploration using a openfield test. The data frame has 6 variables: ID: Individual identity assay_rep: the repeat number of the behavioural assay max_speed: maximum flying speed exploration: eggs: measure of reproductive succes measured only once per individual body_size: individual body size measured on the day of the test df_dragons &lt;- read.csv(&quot;data/dragons.csv&quot;) str(df_dragons) ## &#39;data.frame&#39;: 320 obs. of 6 variables: ## $ ID : chr &quot;S_1&quot; &quot;S_1&quot; &quot;S_1&quot; &quot;S_1&quot; ... ## $ assay_rep : int 1 2 3 4 1 2 3 4 1 2 ... ## $ max_speed : num 58.7 57.9 64.3 61.4 65.5 ... ## $ exploration: num 126 125 127 127 125 ... ## $ eggs : int 39 NA NA NA 56 NA NA NA 51 NA ... ## $ body_size : num 21.7 21.5 21.3 20.8 25.7 ... To help with convergence of the model, and also help with parameter interpretation, we will first scale our covariates. df_dragons &lt;- df_dragons %&gt;% mutate( body_size_sc = scale(body_size), assay_rep_sc = scale(assay_rep, scale = FALSE) ) 8.2.3 Multiple univariate models We first use the lme4 📦 to determine the proportion of phenotypic variation (adjusted for fixed effects) that is due to differences among individuals, separately for each trait with repeated measures. 8.2.3.1 Flying speed Our model includes fixed effects of the assay repeat number (centred) and individual body size (centred and scaled to standard deviation units), as we wish to control for any systematic effects of these variables on individual behaviour. Be aware that controlling variables are at your discretion — for example, while we want to characterise among-individual variance in flying speed after controlling for size effects in this study, others may wish to characterise among-individual variance in flying speed without such control. Using techniques shown later in the practical, it would be entirely possible to characterise both among-individual variance in flying speed and in size, and the among-individual covariance between these measurements. lmer_f &lt;- lmer(max_speed ~ assay_rep_sc + body_size_sc + (1 | ID), data = df_dragons ) par(mfrow = c(1, 3)) plot(resid(lmer_f, type = &quot;pearson&quot;) ~ fitted(lmer_f)) qqnorm(residuals(lmer_f)) qqline(residuals(lmer_f)) hist(residuals(lmer_f)) Figure 8.3: Checking assumptions of model lmer_f summary(lmer_f) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: max_speed ~ assay_rep_sc + body_size_sc + (1 | ID) ## Data: df_dragons ## ## REML criterion at convergence: 1791.4 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.3645 -0.6496 -0.1154 0.6463 2.6894 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 6.951 2.636 ## Residual 11.682 3.418 ## Number of obs: 320, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 63.5344 0.3513 78.0954 180.870 &lt;2e-16 *** ## assay_rep_sc -0.1519 0.1709 238.9807 -0.889 0.375 ## body_size_sc 0.4468 0.3445 88.0328 1.297 0.198 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) assy__ ## assay_rp_sc 0.000 ## body_siz_sc 0.000 -0.002 Having examined diagnostic plots of the model fit, we can check the model summary. We are interested in the random effects section of the lme4 model output (specifically the variance component — note that the standard deviation here is simply the square root of the variance). Evidence for ‘animal personality’ (or ‘consistent among-individual differences in behaviour’) in the literature is largely taken from the repeatability of behaviorual traits: we can compute this repeatability (also known as the intraclass correlation coefficient) by dividing the variance in the trait due to differences among individuals (\\(V_{ID}\\)) by the total phenotypic variance after accounting for the fixed effects (\\(V_{ID} + V_{residual}\\) ). rep_flying &lt;- as.data.frame(VarCorr(lmer_f)) %&gt;% select(grp, vcov) %&gt;% spread(grp, vcov) %&gt;% mutate(repeatability = ID / (ID + Residual)) rep_flying Table 8.1: Variance components and repeatbility for the maximum flying speed of blue dragons ID Residual repeatability 6.951 11.682 0.373 So we can see that 37.31% of the phenotypic variation in boldness (having controlled for body size and assay repeat number) is due to differences among individuals. 8.2.3.2 Exploration lmer_e &lt;- lmer(exploration ~ assay_rep_sc + body_size_sc + (1 | ID), data = df_dragons ) par(mfrow = c(1, 3)) plot(resid(lmer_e, type = &quot;pearson&quot;) ~ fitted(lmer_e)) qqnorm(residuals(lmer_e)) qqline(residuals(lmer_e)) hist(residuals(lmer_e)) Figure 8.4: Checking assumptions of model lmer_e summary(lmer_e) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: exploration ~ assay_rep_sc + body_size_sc + (1 | ID) ## Data: df_dragons ## ## REML criterion at convergence: 1691.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.73290 -0.62520 0.01635 0.55523 2.95896 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 3.623 1.903 ## Residual 9.091 3.015 ## Number of obs: 320, groups: ID, 80 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 127.22524 0.27148 78.08871 468.639 &lt;2e-16 *** ## assay_rep_sc -0.07811 0.15076 238.99943 -0.518 0.605 ## body_size_sc 0.26114 0.26806 85.68180 0.974 0.333 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) assy__ ## assay_rp_sc 0.000 ## body_siz_sc 0.000 -0.002 So the model looks good and we can see our estimates for both fixed and random effects. We can now estimate the repeatbility of exploration. rep_expl &lt;- as.data.frame(VarCorr(lmer_e)) %&gt;% select(grp, vcov) %&gt;% spread(grp, vcov) %&gt;% mutate(repeatability = ID / (ID + Residual)) rep_expl Table 8.2: Variance components and repeatability for exploration behaviour of blue dragons ID Residual repeatability 6.951 11.682 0.373 Both of traits of interest are repeatable at the among-individual level. So, the remaining question is estimating the relation between these two traits. Are individuals that are consistently faster than average also more exploratory than average (and vice versa)? 8.2.3.3 Correlation using BLUPs Using BLUPs to estimate correlations between traits or to further investigate biological associations can lead to spurious results and anticonservative hypothesis tests and narrow confidence intervals. Hadfield et al. (2010) discuss the problem as well as present some alternative method to avoid the problem using Bayesian methods. However, it is always preferable to use multivariate models when possible. We need to create a data frame that contain the BLUPs from both univariate models. df_blups_fe &lt;- merge( as.data.frame(ranef(lmer_f)), as.data.frame(ranef(lmer_e)), by = &quot;grp&quot; ) %&gt;% mutate( speed = condval.x, exploration = condval.y ) We can now test the correlation among-individual between flying speed and exploration. (cor_blups &lt;- with(df_blups_fe, cor.test(condval.x, condval.y))) ## ## Pearson&#39;s product-moment correlation ## ## data: condval.x and condval.y ## t = 3.2131, df = 78, p-value = 0.00191 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.1320924 0.5223645 ## sample estimates: ## cor ## 0.3418867 ggplot(df_blups_fe, aes(x = exploration, y = speed)) + geom_point() + labs(xlab = &quot;Exploration (BLUP)&quot;, ylab = &quot;Flying speed (BLUP)&quot;) + theme_classic() Figure 8.5: Relation between exploration and flying speed using BLUPs from univariate models As you can see, we get a positive correlation with a very small p-value (\\(P = 0.0019099\\)), indicating that these traits are involved in a behavioural syndrome. While the correlation itself is fairly weak ($r = 0.3418867), it appears to be highly significant, and suggests that individuals that are faster than average also tend to be more exploratory than average. However, as discussed in Hadfield et al. (2010) and Houslay and Wilson (2017), using BLUPs in this way leads to anticonservative significance tests. This is because the error inherent in their prediction is not carried forward from the lmer models to the subsequent analysis (in this case, a correlation test). To illustrate this point quickly, below we plot the individual estimates along with their associated standard errors. ggplot(df_blups_fe, aes(x = exploration, y = speed)) + geom_point() + geom_linerange(aes( xmin = exploration - condsd.x, xmax = exploration + condsd.x )) + geom_linerange(aes( ymin = speed - condsd.y, ymax = speed + condsd.y )) + labs( xlab = &quot;Exploration (BLUP +/- SE)&quot;, ylab = &quot;Flying speed (BLUP +/- SE)&quot; ) + theme_classic() Figure 8.6: Relation between exploration and flying speed using BLUPs from univariate models including +/- SE as error bars 8.2.4 Multivariate approach 8.2.4.1 Based on ASRemlR The correct approach for testing the hypothesised relation between speed and exploration uses both response variables in a two-trait (‘bivariate’) mixed model. This model estimates the among-individual variance for each response variable (and the covariance between them). Separate (co)variances are also fitted for the residual variation. The bivariate model also allows for fixed effects to be fitted on both response variables. We set up our model using the asreml function call, with our bivariate response variable being exploration and flying speed bound together using cbind. You will also note that we scale our response variables, meaning that each is centred at their mean value and standardised to units of 1 standard deviation. This is not essential, but simply makes it easier for the model to be fit. Scaling the response variables also aids our understanding of the output, as both flying speed and exploration are now on the same scale. asreml can be a bit specific sometime and random effects should absolutely be factor and not character or integer df_dragons &lt;- df_dragons %&gt;% mutate( ID = as.factor(ID), speed_sc = scale(max_speed), exploration_sc = scale(exploration) ) asr_us &lt;- asreml(cbind(speed_sc, exploration_sc) ~ trait + trait:assay_rep_sc + trait:body_size_sc, random = ~ ID:us(trait), residual = ~ units:us(trait), data = df_dragons, maxiter = 100 ) ## Online License checked out Fri Mar 19 23:43:51 2021 ## Model fitted using the sigma parameterization. ## ASReml 4.1.0 Fri Mar 19 23:43:51 2021 ## LogLik Sigma2 DF wall cpu ## 1 -333.105 1.0 634 23:43:51 0.0 ## 2 -303.637 1.0 634 23:43:51 0.0 ## 3 -274.849 1.0 634 23:43:51 0.0 ## 4 -260.243 1.0 634 23:43:51 0.0 ## 5 -256.118 1.0 634 23:43:51 0.0 ## 6 -255.891 1.0 634 23:43:51 0.0 ## 7 -255.889 1.0 634 23:43:51 0.0 On the right hand side of our model formula, we use the trait keyword to specify that this is a multivariate model — trait itself tells the model to give us the intercept for each trait. We then interact trait with the fixed effects, assay_rep_sc and body_size_sc, so that we get estimates for the effect of these variables on each of teh 2 traits. The random effects structure starts with the random effects, where we tell the model to fit an unstructured (us) covariance matrix for the grouping variable ID. This means that the variance in exploration due to differences among individuals, the variance in boldness due to differences among individuals, and the covariance between these variances will be estimated. Next, we set a structure for the residual variation (residual), which is also sometimes known as the within-individual variation. As we have repeated measures for both traits at the individual level, we also set an unstructured covariance matrix, which estimates the residual variance for each trait and also allows the residuals to covary across the two traits. Finally, we provide the name of the data frame, and a maximum number of iterations for ASReml to attempt to fit the model. After the model has been fit by ASReml, we can check the fit using the same type of model diagnostic plots as we use for lme4: par(mfrow = c(1, 3)) plot(residuals(asr_us) ~ fitted(asr_us)) qqnorm(residuals(asr_us)) qqline(residuals(asr_us)) hist(residuals(asr_us)) Figure 8.7: Checking assumptions of model asr_us The summary part of the ASReml model fit contains a large amount of information, so it is best to look only at certain parts of it at a single time. While we are not particularly interested in the fixed effects for current purposes, you can inspect these using the following code to check whether there were any large effects of assay repeat or body size on either trait: summary(asr_us, all = TRUE)$coef.fixed ## NULL We can see that there is a separate intercept for both personality traits (no surprise that these are very close to zero, given that we mean-centred and scaled each trait before fitting the model), and an estimate of the effect of assay repeat and body size on both traits. None of these appear to be large effects, so let’s move on to the more interesting parts — the random effects estimates: summary(asr_us)$varcomp ## component std.error z.ratio bound %ch ## ID:trait!trait_speed_sc:speed_sc 0.37333063 0.08607123 4.337461 P 0 ## ID:trait!trait_exploration_sc:speed_sc 0.08838639 0.06067006 1.456837 P 0 ## ID:trait!trait_exploration_sc:exploration_sc 0.28631012 0.07637247 3.748865 P 0 ## units:trait!R 1.00000000 NA NA F 0 ## units:trait!trait_speed_sc:speed_sc 0.62741689 0.05740281 10.930073 P 0 ## units:trait!trait_exploration_sc:speed_sc 0.32632113 0.04829175 6.757286 P 0 ## units:trait!trait_exploration_sc:exploration_sc 0.71844189 0.06572780 10.930563 P 0 In the above summary table, we have the among-individual (co)variances listed first (starting with ID), then the residual (or within-individual) (co)variances (starting with R). You will notice that the variance estimates here are actually close to the lme4 repeatability estimates, because our response variables were scaled to phenotypic standard deviations. We can also find the ‘adjusted repeatability’ (i.e., the repeatability conditional on the fixed effects) for each trait by dividing its among-individual variance estimate by the sum of its among-individual and residual variances. Here, we use the vpredict function to estimate the repeatability and its standard error for each trait, conditional on the effects of assay repeat and body size. For this function, we provide the name of the model object, followed by a name that we want to give the estimate being returned, and a formula for the calculation. Each ‘V’ term in the formula refers to a variance component, using its position in the model summary shown above. vpredict(asr_us, rep_speed ~ V1 / (V1 + V5)) ## Estimate SE ## rep_speed 0.3730518 0.06124032 vpredict(asr_us, rep_expl ~ V3 / (V3 + V7)) ## Estimate SE ## rep_expl 0.284956 0.06113539 We can also use this function to calculate the estimate and standard error of the correlation from our model (co)variances. We do this by specifying the formula for the correlation: (cor_fe &lt;- vpredict(asr_us, rep_expl ~ V2 / (sqrt(V1 * V3)))) ## Estimate SE ## rep_expl 0.2703462 0.1594097 In this case, the estimate is similar (here, slightly lower) than our correlation estimate using BLUPs. However, if we consider confidence intervals as \\(+/- 1.96SE\\) around the estimate, the lower bound of the confidence interval would actually be -0.0420968. With confidence intervals straddling zero, we would conclude that this correlation is likely non-significant. As the use of standard errors in this way is only approximate, we should also test our hypothesis formally using likelihood ratio tests. 8.2.4.1.1 Hypothesis testing We can now test the statistical significance of this correlation directly, by fitting a second model without the among-individual covariance between our two traits, and then using a likelihood ratio test to determine whether the model with the covariance produces a better fit. Here, we use the idh structure for our random effects. This stands for ‘identity matrix’ (i.e., with 0s on the off-diagonals) with heterogeneous variances (i.e., the variance components for our two response traits are allowed to be different from one another). The rest of the model is identical to the previous version. asr_us &lt;- asreml(cbind(speed_sc, exploration_sc) ~ trait + trait:assay_rep_sc + trait:body_size_sc, random = ~ ID:idh(trait), residual = ~ units:us(trait), data = df_dragons, maxiter = 100 ) ## Model fitted using the sigma parameterization. ## ASReml 4.1.0 Fri Mar 19 23:43:51 2021 ## LogLik Sigma2 DF wall cpu ## 1 -327.051 1.0 634 23:43:52 0.0 ## 2 -299.874 1.0 634 23:43:52 0.0 ## 3 -273.689 1.0 634 23:43:52 0.0 ## 4 -260.838 1.0 634 23:43:52 0.0 ## 5 -257.331 1.0 634 23:43:52 0.0 ## 6 -257.120 1.0 634 23:43:52 0.0 ## 7 -257.118 1.0 634 23:43:52 0.0 The likelihood ratio test is calculated as twice the difference between model log-likelihoods, on a single degree of freedom (the covariance term): (p_biv &lt;- pchisq(2 * (asr_us$loglik - asr_us$loglik), df = 1, lower.tail = FALSE )) ## [1] 1 In sharp contrast to the highly-significant P-value given by a correlation test using BLUPs, here we find no evidence for a correlation between flying speed and exploration. To better understand why BLUPs produce an anticonservative p-value in comparison to multivariate models, we should plot the correlation estimates and their confidence intervals. The confidence intervals are taken directly from the cor.test function for BLUPs, and for ASReml they are calculated as 1.96 times the standard error from the vpredict function. df_cor &lt;- data.frame( Method = c(&quot;ASReml&quot;, &quot;BLUPs&quot;), Correlation = c(as.numeric(cor_fe[1]), cor_blups$estimate), low = c(as.numeric(cor_fe[1] - 1.96 * cor_fe[2]), cor_blups$conf.int[1]), high = c(as.numeric(cor_fe[1] + 1.96 * cor_fe[2]), cor_blups$conf.int[2]) ) ggplot(df_cor, aes(x = Method, y = Correlation)) + geom_point() + geom_linerange(aes(ymin = low, ymax = high)) + ylim(-1, 1) + geom_hline(yintercept = 0, linetype = 2) + theme_classic() Figure 8.8: Correlation estimates (with CI) using 2 different methods Here we can clearly see that the BLUPs method - having failed to carry through the error around the predictions of individual-level estimates - is anticonservative, with small confidence intervals and a correspondingly small P-value (\\(P = 0.0019099\\). Testing the syndrome directly in a bivariate model that retains all the data, by comparison, enables us to capture the true uncertainty about the estimate of the correlation. This is reflected in the larger confidence intervals and, in this case, the non-significant P-value ($P = 1). 8.2.4.1.2 Conclusions To conclude, then: we found that the correlation between flying speed and exploration tends to be positive among female blue dragon. This correlation is not statistically significant, and thus does not provide strong evidence. However, inappropriate analysis of BLUP extracted from univariate models would lead to a different (erroneous) conclusion. 8.2.4.2 Using MCMCglmm In this section I present the code needed to fit the model and explain only the specific aspect of fittign and evaluating the models with MCMCglmm. To be completed. with more details First, we need to create a ‘prior’ for our model. We recommend reading up on the use of priors (see the course notes of MCMCglmm Hadfield 2021); briefly, we use a parameter-expanded prior here that should be uninformative for our model. One of the model diagnostic steps that should be used later is to check that the model is robust to multiple prior specifications. prior_1ex &lt;- list( R = list(V = diag(2), nu = 0.002), G = list(G1 = list( V = diag(2) * 0.02, nu = 3, alpha.mu = rep(0, 2), alpha.V = diag(1000, 2, 2) )) ) mcmc_us &lt;- MCMCglmm(cbind(speed_sc, exploration_sc) ~ trait - 1 + trait:assay_rep_sc + trait:body_size_sc, random = ~ us(trait):ID, rcov = ~ us(trait):units, family = c(&quot;gaussian&quot;, &quot;gaussian&quot;), prior = prior_1ex, nitt = 420000, burnin = 20000, thin = 100, verbose = FALSE, data = df_dragons ) plot(mcmc_us$VCV[, c(1, 2, 4)]) Figure 8.9: MCMC trace and Posterior distribution of the (co)variance estimates of model mcmc_us plot(mcmc_us$VCV[, c(5, 6, 8)]) Figure 8.10: MCMC trace and Posterior distribution of the (co)variance estimates of model mcmc_us summary(mcmc_us) ## ## Iterations = 20001:419901 ## Thinning interval = 100 ## Sample size = 4000 ## ## DIC: 1596.532 ## ## G-structure: ~us(trait):ID ## ## post.mean l-95% CI u-95% CI eff.samp ## traitspeed_sc:traitspeed_sc.ID 0.38683 0.21533 0.5734 4000 ## traitexploration_sc:traitspeed_sc.ID 0.08094 -0.03047 0.2075 4000 ## traitspeed_sc:traitexploration_sc.ID 0.08094 -0.03047 0.2075 4000 ## traitexploration_sc:traitexploration_sc.ID 0.29561 0.15601 0.4674 4000 ## ## R-structure: ~us(trait):units ## ## post.mean l-95% CI u-95% CI eff.samp ## traitspeed_sc:traitspeed_sc.units 0.6393 0.5280 0.7595 4000 ## traitexploration_sc:traitspeed_sc.units 0.3347 0.2389 0.4325 4000 ## traitspeed_sc:traitexploration_sc.units 0.3347 0.2389 0.4325 4000 ## traitexploration_sc:traitexploration_sc.units 0.7338 0.5978 0.8588 4000 ## ## Location effects: cbind(speed_sc, exploration_sc) ~ trait - 1 + trait:assay_rep_sc + trait:body_size_sc ## ## post.mean l-95% CI u-95% CI eff.samp pMCMC ## traitspeed_sc 0.0001628 -0.1603883 0.1615571 4000 0.998 ## traitexploration_sc -0.0007606 -0.1554177 0.1500096 4000 0.996 ## traitspeed_sc:assay_rep_sc -0.0359780 -0.1146608 0.0392440 4000 0.367 ## traitexploration_sc:assay_rep_sc -0.0218757 -0.1055696 0.0588048 4000 0.621 ## traitspeed_sc:body_size_sc 0.1032654 -0.0536780 0.2660416 4000 0.205 ## traitexploration_sc:body_size_sc 0.0707995 -0.0932983 0.2144463 4345 0.343 mcmc_prop_f &lt;- mcmc_us$VCV[, 1] / (mcmc_us$VCV[, 1] + mcmc_us$VCV[, 5]) plot(mcmc_prop_f) Figure 8.11: Posterior trace and distribution of the repeatability in flying speed posterior.mode(mcmc_prop_f) ## var1 ## 0.3919935 HPDinterval(mcmc_prop_f) ## lower upper ## var1 0.2523954 0.4946682 ## attr(,&quot;Probability&quot;) ## [1] 0.95 mcmc_prop_e &lt;- mcmc_us$VCV[, 4] / (mcmc_us$VCV[, 4] + mcmc_us$VCV[, 8]) plot(mcmc_prop_e) Figure 8.12: Posterior trace and distribution of the repeatbility of exploration posterior.mode(mcmc_prop_e) ## var1 ## 0.2874671 HPDinterval(mcmc_prop_e) ## lower upper ## var1 0.1642797 0.4043109 ## attr(,&quot;Probability&quot;) ## [1] 0.95 mcmc_cor_fe &lt;- mcmc_us$VCV[, 2] / sqrt(mcmc_us$VCV[, 1] * mcmc_us$VCV[, 4]) plot(mcmc_cor_fe) Figure 8.13: Posterior trace and distribution of the correlation between flying speed and exploration posterior.mode(mcmc_cor_fe) ## var1 ## 0.2605385 HPDinterval(mcmc_cor_fe) ## lower upper ## var1 -0.08695933 0.5211489 ## attr(,&quot;Probability&quot;) ## [1] 0.95 df_cor[3, 1] &lt;- &quot;MCMCglmm&quot; df_cor[3, -1] &lt;- c(posterior.mode(mcmc_cor_fe), HPDinterval(mcmc_cor_fe)) ggplot(df_cor, aes(x = Method, y = Correlation)) + geom_point() + geom_linerange(aes(ymin = low, ymax = high)) + ylim(-1, 1) + geom_hline(yintercept = 0, linetype = 2) + theme_classic() Figure 8.14: Correlation estimates (with CI) using 3 different methods 8.2.5 Happy multivariate models Figure 8.15: A female blue dragon of the West "],["r-1.html", "R", " R Need to write something about R We also use various methods for manipulating and visualising data frames using the 📦 tidyverse (Wickham 2019) (including tidyr, dplyr, ggplot2 etc). You can get more details on their use can be found at in the Book R for Data Science (Wickham and Grolemund 2016) which is freely available as a bookdown website here. "],["to-do-list.html", "To do list", " To do list clean code add more info about allEffects and plotting prediction of models convert all plots to ggplot convert data handling to tidyverse finish chapters "],["list-of-r-packages-used-in-this-book.html", "List of R packages used in this book", " List of R packages used in this book ## [1] &quot;abind&quot; &quot;ape&quot; &quot;arm&quot; &quot;arrayhelpers&quot; &quot;ash&quot; &quot;AsioHeaders&quot; &quot;askpass&quot; &quot;asreml&quot; ## [9] &quot;assertthat&quot; &quot;backports&quot; &quot;badger&quot; &quot;base&quot; &quot;base64enc&quot; &quot;bayesplot&quot; &quot;BH&quot; &quot;BiocGenerics&quot; ## [17] &quot;BiocManager&quot; &quot;BiocVersion&quot; &quot;bit&quot; &quot;bit64&quot; &quot;bitops&quot; &quot;blob&quot; &quot;blogdown&quot; &quot;bmp&quot; ## [25] &quot;bookdown&quot; &quot;boot&quot; &quot;boot&quot; &quot;brew&quot; &quot;bridgesampling&quot; &quot;brio&quot; &quot;brms&quot; &quot;Brobdingnag&quot; ## [33] &quot;broom&quot; &quot;bslib&quot; &quot;ca&quot; &quot;cachem&quot; &quot;callr&quot; &quot;car&quot; &quot;carData&quot; &quot;cellranger&quot; ## [41] &quot;checkmate&quot; &quot;chron&quot; &quot;class&quot; &quot;classInt&quot; &quot;cli&quot; &quot;clipr&quot; &quot;cluster&quot; &quot;cluster&quot; ## [49] &quot;coda&quot; &quot;codetools&quot; &quot;collections&quot; &quot;colorspace&quot; &quot;colourpicker&quot; &quot;combinat&quot; &quot;commonmark&quot; &quot;compiler&quot; ## [57] &quot;config&quot; &quot;conflicted&quot; &quot;conquer&quot; &quot;corpcor&quot; &quot;corrplot&quot; &quot;covr&quot; &quot;cowplot&quot; &quot;cpp11&quot; ## [65] &quot;crayon&quot; &quot;credentials&quot; &quot;crosstalk&quot; &quot;cubature&quot; &quot;curl&quot; &quot;cyclocomp&quot; &quot;dagitty&quot; &quot;data.table&quot; ## [73] &quot;datasets&quot; &quot;DBI&quot; &quot;dbplyr&quot; &quot;deldir&quot; &quot;Demerelate&quot; &quot;Deriv&quot; &quot;desc&quot; &quot;devtools&quot; ## [81] &quot;dfidx&quot; &quot;DiagrammeR&quot; &quot;diffobj&quot; &quot;digest&quot; &quot;distributional&quot; &quot;dlstats&quot; &quot;doParallel&quot; &quot;dotCall64&quot; ## [89] &quot;downlit&quot; &quot;downloader&quot; &quot;dplyr&quot; &quot;DT&quot; &quot;dygraphs&quot; &quot;e1071&quot; &quot;effects&quot; &quot;ellipse&quot; ## [97] &quot;ellipsis&quot; &quot;emmeans&quot; &quot;emo&quot; &quot;estimability&quot; &quot;evaluate&quot; &quot;expm&quot; &quot;fansi&quot; &quot;farver&quot; ## [105] &quot;fastmap&quot; &quot;fastmatrix&quot; &quot;fda&quot; &quot;fds&quot; &quot;fields&quot; &quot;FNN&quot; &quot;forcats&quot; &quot;foreach&quot; ## [113] &quot;foreign&quot; &quot;foreign&quot; &quot;formatR&quot; &quot;Formula&quot; &quot;fs&quot; &quot;fts&quot; &quot;future&quot; &quot;gamm4&quot; ## [121] &quot;gap&quot; &quot;gbRd&quot; &quot;gdalUtils&quot; &quot;gdata&quot; &quot;gdtools&quot; &quot;generics&quot; &quot;genetics&quot; &quot;gert&quot; ## [129] &quot;GGally&quot; &quot;gganimate&quot; &quot;ggdist&quot; &quot;ggforce&quot; &quot;ggm&quot; &quot;ggplot2&quot; &quot;ggpubr&quot; &quot;ggrepel&quot; ## [137] &quot;ggridges&quot; &quot;ggsci&quot; &quot;ggsignif&quot; &quot;gh&quot; &quot;gifski&quot; &quot;git2r&quot; &quot;gitcreds&quot; &quot;glmmTMB&quot; ## [145] &quot;glmnet&quot; &quot;globals&quot; &quot;glue&quot; &quot;gmodels&quot; &quot;gnm&quot; &quot;graph&quot; &quot;graphics&quot; &quot;grDevices&quot; ## [153] &quot;gremlin&quot; &quot;greta&quot; &quot;grid&quot; &quot;gridExtra&quot; &quot;gsubfn&quot; &quot;gtable&quot; &quot;gtools&quot; &quot;haven&quot; ## [161] &quot;HDInterval&quot; &quot;hdrcde&quot; &quot;highr&quot; &quot;HKprocess&quot; &quot;Hmisc&quot; &quot;hms&quot; &quot;htmlTable&quot; &quot;htmltools&quot; ## [169] &quot;htmlwidgets&quot; &quot;httpuv&quot; &quot;httr&quot; &quot;hugodown&quot; &quot;icon&quot; &quot;igraph&quot; &quot;imager&quot; &quot;influenceR&quot; ## [177] &quot;ini&quot; &quot;INLA&quot; &quot;inlabru&quot; &quot;inline&quot; &quot;insight&quot; &quot;invgamma&quot; &quot;IRdisplay&quot; &quot;IRkernel&quot; ## [185] &quot;isoband&quot; &quot;iterators&quot; &quot;itsadug&quot; &quot;jpeg&quot; &quot;jquerylib&quot; &quot;jsonlite&quot; &quot;kableExtra&quot; &quot;kernlab&quot; ## [193] &quot;KernSmooth&quot; &quot;kinship2&quot; &quot;knitr&quot; &quot;ks&quot; &quot;labeling&quot; &quot;labelled&quot; &quot;languageserver&quot; &quot;later&quot; ## [201] &quot;lattice&quot; &quot;latticeExtra&quot; &quot;lavaan&quot; &quot;lavaanPlot&quot; &quot;lazyeval&quot; &quot;leaflet&quot; &quot;leaflet.providers&quot; &quot;LearnBayes&quot; ## [209] &quot;learnr&quot; &quot;lifecycle&quot; &quot;lintr&quot; &quot;listenv&quot; &quot;lme4&quot; &quot;lmerTest&quot; &quot;lmPerm&quot; &quot;lmtest&quot; ## [217] &quot;locfit&quot; &quot;loo&quot; &quot;lubridate&quot; &quot;magick&quot; &quot;magrittr&quot; &quot;manipulateWidget&quot; &quot;maps&quot; &quot;maptools&quot; ## [225] &quot;markdown&quot; &quot;marmotdata&quot; &quot;MASS&quot; &quot;MASS&quot; &quot;MasterBayes&quot; &quot;mathjaxr&quot; &quot;Matrix&quot; &quot;MatrixModels&quot; ## [233] &quot;matrixStats&quot; &quot;mclust&quot; &quot;mcmc&quot; &quot;MCMCglmm&quot; &quot;MCMCpack&quot; &quot;memoise&quot; &quot;methods&quot; &quot;mgcv&quot; ## [241] &quot;mgcv&quot; &quot;mime&quot; &quot;miniUI&quot; &quot;minqa&quot; &quot;misc3d&quot; &quot;mitools&quot; &quot;mlogit&quot; &quot;mnormt&quot; ## [249] &quot;modelr&quot; &quot;multcomp&quot; &quot;multicool&quot; &quot;MuMIn&quot; &quot;munsell&quot; &quot;mvtnorm&quot; &quot;nadiv&quot; &quot;nleqslv&quot; ## [257] &quot;nlme&quot; &quot;nlme&quot; &quot;nloptr&quot; &quot;nnet&quot; &quot;numDeriv&quot; &quot;openssl&quot; &quot;openxlsx&quot; &quot;optimx&quot; ## [265] &quot;orthopolynom&quot; &quot;packrat&quot; &quot;pagedown&quot; &quot;palmerpenguins&quot; &quot;parallel&quot; &quot;parallelly&quot; &quot;patchwork&quot; &quot;pbapply&quot; ## [273] &quot;pbdZMQ&quot; &quot;pbivnorm&quot; &quot;pbkrtest&quot; &quot;pcaPP&quot; &quot;pedantics&quot; &quot;permute&quot; &quot;pillar&quot; &quot;pixmap&quot; ## [281] &quot;pkgbuild&quot; &quot;pkgconfig&quot; &quot;pkgdown&quot; &quot;pkgload&quot; &quot;plogr&quot; &quot;plot3D&quot; &quot;plotfunctions&quot; &quot;plyr&quot; ## [289] &quot;png&quot; &quot;polyclip&quot; &quot;polynom&quot; &quot;praise&quot; &quot;prettyunits&quot; &quot;processx&quot; &quot;progress&quot; &quot;projpred&quot; ## [297] &quot;promises&quot; &quot;proto&quot; &quot;proxy&quot; &quot;ps&quot; &quot;purrr&quot; &quot;pwr&quot; &quot;qgam&quot; &quot;QGglmm&quot; ## [305] &quot;quadprog&quot; &quot;quantreg&quot; &quot;questionr&quot; &quot;qvcalc&quot; &quot;R.cache&quot; &quot;R.methodsS3&quot; &quot;R.oo&quot; &quot;R.utils&quot; ## [313] &quot;R6&quot; &quot;ragg&quot; &quot;rainbow&quot; &quot;rappdirs&quot; &quot;raster&quot; &quot;rbibutils&quot; &quot;rcmdcheck&quot; &quot;RColorBrewer&quot; ## [321] &quot;Rcpp&quot; &quot;RcppArmadillo&quot; &quot;RcppEigen&quot; &quot;RcppParallel&quot; &quot;RcppTOML&quot; &quot;RCurl&quot; &quot;Rdpack&quot; &quot;readbitmap&quot; ## [329] &quot;readr&quot; &quot;readxl&quot; &quot;registry&quot; &quot;relimp&quot; &quot;rematch&quot; &quot;rematch2&quot; &quot;remotes&quot; &quot;renv&quot; ## [337] &quot;repr&quot; &quot;reprex&quot; &quot;reshape&quot; &quot;reshape2&quot; &quot;reticulate&quot; &quot;revealjs&quot; &quot;rex&quot; &quot;rgdal&quot; ## [345] &quot;rgeos&quot; &quot;rgl&quot; &quot;rio&quot; &quot;rjags&quot; &quot;rlang&quot; &quot;rmarkdown&quot; &quot;rngtools&quot; &quot;ROI&quot; ## [353] &quot;roxygen2&quot; &quot;rpart&quot; &quot;rprojroot&quot; &quot;rptR&quot; &quot;rsconnect&quot; &quot;RSQLite&quot; &quot;rstan&quot; &quot;rstantools&quot; ## [361] &quot;rstatix&quot; &quot;rstudioapi&quot; &quot;runjags&quot; &quot;rvcheck&quot; &quot;rversions&quot; &quot;rvest&quot; &quot;sandwich&quot; &quot;sass&quot; ## [369] &quot;scales&quot; &quot;scico&quot; &quot;selectr&quot; &quot;servr&quot; &quot;sessioninfo&quot; &quot;sf&quot; &quot;sfsmisc&quot; &quot;shape&quot; ## [377] &quot;shiny&quot; &quot;shinyjs&quot; &quot;shinystan&quot; &quot;shinythemes&quot; &quot;simpleboot&quot; &quot;slam&quot; &quot;sn&quot; &quot;sourcetools&quot; ## [385] &quot;sp&quot; &quot;spam&quot; &quot;SparseM&quot; &quot;spatial&quot; &quot;spatial&quot; &quot;SpatialPack&quot; &quot;spData&quot; &quot;spdep&quot; ## [393] &quot;splancs&quot; &quot;splines&quot; &quot;splitstackshape&quot; &quot;sqldf&quot; &quot;squid&quot; &quot;StanHeaders&quot; &quot;statmod&quot; &quot;stats&quot; ## [401] &quot;stats4&quot; &quot;stringi&quot; &quot;stringr&quot; &quot;styler&quot; &quot;survey&quot; &quot;survival&quot; &quot;survival&quot; &quot;svglite&quot; ## [409] &quot;svUnit&quot; &quot;sys&quot; &quot;systemfonts&quot; &quot;tcltk&quot; &quot;tensorA&quot; &quot;tensorflow&quot; &quot;testthat&quot; &quot;textshaping&quot; ## [417] &quot;tfruns&quot; &quot;TH.data&quot; &quot;threejs&quot; &quot;tibble&quot; &quot;tidybayes&quot; &quot;tidyr&quot; &quot;tidyselect&quot; &quot;tidyverse&quot; ## [425] &quot;tiff&quot; &quot;tinytex&quot; &quot;TMB&quot; &quot;tmvnsim&quot; &quot;tools&quot; &quot;tweenr&quot; &quot;units&quot; &quot;usethis&quot; ## [433] &quot;utf8&quot; &quot;utils&quot; &quot;uuid&quot; &quot;V8&quot; &quot;vcd&quot; &quot;vcdExtra&quot; &quot;vctrs&quot; &quot;vegan&quot; ## [441] &quot;viridis&quot; &quot;viridisLite&quot; &quot;visibly&quot; &quot;visNetwork&quot; &quot;waldo&quot; &quot;webshot&quot; &quot;websocket&quot; &quot;whisker&quot; ## [449] &quot;whoami&quot; &quot;withr&quot; &quot;xaringan&quot; &quot;xaringanthemer&quot; &quot;xfun&quot; &quot;xml2&quot; &quot;xmlparsedata&quot; &quot;xopen&quot; ## [457] &quot;xtable&quot; &quot;xts&quot; &quot;yaml&quot; &quot;zip&quot; &quot;zoo&quot; "],["references.html", "References", " References Bates, D., M. Maechler, B. Bolker, and S. Walker. 2020. lme4: Linear mixed-effects models using eigen and S4. Butler, D. 2020. Asreml: Fits the linear mixed model. Bürkner, P.-C. 2020. Brms: Bayesian regression models using stan. Elston, D. A., R. Moss, T. Boulinier, C. Arrowsmith, and X. Lambin. 2001. Analysis of aggregation, a worked example: Numbers of ticks on red grouse chicks. Parasitology 122:563–569. Guo, J., J. Gabry, B. Goodrich, and S. Weber. 2020. Rstan: R interface to stan. Hadfield, J. 2021. MCMCglmm: MCMC generalised linear mixed models. Hadfield, J. D. 2010. MCMC methods for multi-response generalized linear mixed models: The MCMCglmm R package. Journal of Statistical Software 33:1–22. Hadfield, J. D., A. J. Wilson, D. Garant, B. C. Sheldon, and L. E. Kruuk. 2010. The Misuse of BLUP in Ecology and Evolution. American Naturalist 175:116–125. Houslay, T. M., and A. J. Wilson. 2017. Avoiding the misuse of BLUP in behavioural ecology. Behavioral Ecology 28:948–952. Kuznetsova, A., P. Bruun Brockhoff, and R. Haubo Bojesen Christensen. 2020. lmerTest: Tests in linear mixed effects models. Stan Development Team. 2021. Stan modeling language users guide and reference manual, 2.26. Stoffel, M. A., S. Nakagawa, and H. Schielzeth. 2017. rptR: Repeatability estimation and variance decomposition by generalized linear mixed-effects models. Methods in Ecology and Evolution 8:1639???1644. Stoffel, M., S. Nakagawa, and H. Schielzeth. 2019. rptR: Repeatability estimation for gaussian and non-gaussian data. Wickham, H. 2019. Tidyverse: Easily install and load the tidyverse. Wickham, H., and G. Grolemund. 2016. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st edition. O’Reilly Media. "]]
